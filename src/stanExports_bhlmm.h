// Generated by rstantools.  Do not edit by hand.

/*
    analysis2Dmito is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    analysis2Dmito is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with analysis2Dmito.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_bhlmm_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'bhlmm', line 49, column 2 to column 23)",
                                                      " (in 'bhlmm', line 50, column 2 to column 14)",
                                                      " (in 'bhlmm', line 51, column 2 to column 25)",
                                                      " (in 'bhlmm', line 52, column 2 to column 12)",
                                                      " (in 'bhlmm', line 53, column 2 to column 12)",
                                                      " (in 'bhlmm', line 54, column 2 to column 22)",
                                                      " (in 'bhlmm', line 55, column 2 to column 22)",
                                                      " (in 'bhlmm', line 56, column 2 to column 34)",
                                                      " (in 'bhlmm', line 84, column 2 to column 23)",
                                                      " (in 'bhlmm', line 85, column 2 to column 27)",
                                                      " (in 'bhlmm', line 86, column 2 to column 22)",
                                                      " (in 'bhlmm', line 87, column 2 to column 21)",
                                                      " (in 'bhlmm', line 89, column 2 to column 38)",
                                                      " (in 'bhlmm', line 90, column 2 to column 41)",
                                                      " (in 'bhlmm', line 91, column 2 to column 32)",
                                                      " (in 'bhlmm', line 92, column 2 to column 21)",
                                                      " (in 'bhlmm', line 93, column 2 to column 14)",
                                                      " (in 'bhlmm', line 94, column 2 to column 14)",
                                                      " (in 'bhlmm', line 96, column 2 to column 20)",
                                                      " (in 'bhlmm', line 97, column 2 to column 20)",
                                                      " (in 'bhlmm', line 98, column 2 to column 31)",
                                                      " (in 'bhlmm', line 99, column 2 to column 18)",
                                                      " (in 'bhlmm', line 100, column 2 to column 18)",
                                                      " (in 'bhlmm', line 101, column 2 to column 28)",
                                                      " (in 'bhlmm', line 102, column 2 to column 28)",
                                                      " (in 'bhlmm', line 103, column 2 to column 40)",
                                                      " (in 'bhlmm', line 104, column 2 to column 27)",
                                                      " (in 'bhlmm', line 105, column 2 to column 20)",
                                                      " (in 'bhlmm', line 106, column 2 to column 20)",
                                                      " (in 'bhlmm', line 108, column 2 to column 34)",
                                                      " (in 'bhlmm', line 109, column 2 to column 44)",
                                                      " (in 'bhlmm', line 110, column 2 to column 36)",
                                                      " (in 'bhlmm', line 111, column 2 to column 34)",
                                                      " (in 'bhlmm', line 113, column 4 to column 111)",
                                                      " (in 'bhlmm', line 114, column 4 to column 106)",
                                                      " (in 'bhlmm', line 115, column 4 to column 41)",
                                                      " (in 'bhlmm', line 112, column 18 to line 116, column 3)",
                                                      " (in 'bhlmm', line 112, column 2 to line 116, column 3)",
                                                      " (in 'bhlmm', line 117, column 2 to column 35)",
                                                      " (in 'bhlmm', line 119, column 2 to column 56)",
                                                      " (in 'bhlmm', line 120, column 2 to column 56)",
                                                      " (in 'bhlmm', line 121, column 2 to column 51)",
                                                      " (in 'bhlmm', line 122, column 2 to column 51)",
                                                      " (in 'bhlmm', line 124, column 4 to column 74)",
                                                      " (in 'bhlmm', line 125, column 4 to column 61)",
                                                      " (in 'bhlmm', line 123, column 17 to line 126, column 3)",
                                                      " (in 'bhlmm', line 123, column 2 to line 126, column 3)",
                                                      " (in 'bhlmm', line 127, column 2 to column 74)",
                                                      " (in 'bhlmm', line 128, column 2 to column 61)",
                                                      " (in 'bhlmm', line 129, column 2 to column 50)",
                                                      " (in 'bhlmm', line 130, column 2 to column 47)",
                                                      " (in 'bhlmm', line 132, column 2 to column 56)",
                                                      " (in 'bhlmm', line 133, column 2 to column 43)",
                                                      " (in 'bhlmm', line 136, column 4 to column 63)",
                                                      " (in 'bhlmm', line 137, column 4 to column 89)",
                                                      " (in 'bhlmm', line 135, column 18 to line 138, column 3)",
                                                      " (in 'bhlmm', line 135, column 2 to line 138, column 3)",
                                                      " (in 'bhlmm', line 59, column 2 to column 18)",
                                                      " (in 'bhlmm', line 60, column 2 to column 17)",
                                                      " (in 'bhlmm', line 61, column 2 to column 46)",
                                                      " (in 'bhlmm', line 62, column 2 to column 46)",
                                                      " (in 'bhlmm', line 63, column 2 to column 41)",
                                                      " (in 'bhlmm', line 64, column 2 to column 41)",
                                                      " (in 'bhlmm', line 66, column 41 to column 49)",
                                                      " (in 'bhlmm', line 66, column 4 to column 52)",
                                                      " (in 'bhlmm', line 67, column 4 to column 39)",
                                                      " (in 'bhlmm', line 65, column 17 to line 68, column 3)",
                                                      " (in 'bhlmm', line 65, column 2 to line 68, column 3)",
                                                      " (in 'bhlmm', line 69, column 2 to column 37)",
                                                      " (in 'bhlmm', line 70, column 2 to column 40)",
                                                      " (in 'bhlmm', line 71, column 2 to column 32)",
                                                      " (in 'bhlmm', line 72, column 2 to column 30)",
                                                      " (in 'bhlmm', line 74, column 4 to column 102)",
                                                      " (in 'bhlmm', line 73, column 19 to line 75, column 3)",
                                                      " (in 'bhlmm', line 73, column 2 to line 75, column 3)",
                                                      " (in 'bhlmm', line 77, column 4 to line 79, column 86)",
                                                      " (in 'bhlmm', line 76, column 18 to line 80, column 3)",
                                                      " (in 'bhlmm', line 76, column 2 to line 80, column 3)",
                                                      " (in 'bhlmm', line 22, column 2 to column 8)",
                                                      " (in 'bhlmm', line 23, column 2 to column 8)",
                                                      " (in 'bhlmm', line 24, column 2 to column 8)",
                                                      " (in 'bhlmm', line 25, column 2 to column 11)",
                                                      " (in 'bhlmm', line 26, column 9 to column 13)",
                                                      " (in 'bhlmm', line 26, column 2 to column 20)",
                                                      " (in 'bhlmm', line 27, column 2 to column 17)",
                                                      " (in 'bhlmm', line 28, column 2 to column 17)",
                                                      " (in 'bhlmm', line 29, column 2 to column 26)",
                                                      " (in 'bhlmm', line 30, column 2 to column 26)",
                                                      " (in 'bhlmm', line 31, column 2 to column 28)",
                                                      " (in 'bhlmm', line 32, column 2 to column 27)",
                                                      " (in 'bhlmm', line 33, column 2 to column 28)",
                                                      " (in 'bhlmm', line 34, column 2 to column 27)",
                                                      " (in 'bhlmm', line 35, column 2 to column 26)",
                                                      " (in 'bhlmm', line 36, column 2 to column 25)",
                                                      " (in 'bhlmm', line 37, column 2 to column 16)",
                                                      " (in 'bhlmm', line 38, column 2 to column 25)",
                                                      " (in 'bhlmm', line 39, column 2 to column 24)",
                                                      " (in 'bhlmm', line 40, column 2 to column 15)",
                                                      " (in 'bhlmm', line 41, column 2 to column 21)",
                                                      " (in 'bhlmm', line 42, column 2 to column 20)",
                                                      " (in 'bhlmm', line 43, column 2 to column 20)",
                                                      " (in 'bhlmm', line 44, column 9 to column 14)",
                                                      " (in 'bhlmm', line 44, column 16 to column 17)",
                                                      " (in 'bhlmm', line 44, column 2 to column 28)",
                                                      " (in 'bhlmm', line 45, column 9 to column 13)",
                                                      " (in 'bhlmm', line 45, column 15 to column 16)",
                                                      " (in 'bhlmm', line 45, column 2 to column 26)",
                                                      " (in 'bhlmm', line 46, column 34 to column 39)",
                                                      " (in 'bhlmm', line 46, column 2 to column 41)",
                                                      " (in 'bhlmm', line 49, column 18 to column 19)",
                                                      " (in 'bhlmm', line 50, column 9 to column 10)",
                                                      " (in 'bhlmm', line 89, column 32 to column 36)",
                                                      " (in 'bhlmm', line 90, column 27 to column 31)",
                                                      " (in 'bhlmm', line 91, column 18 to column 22)",
                                                      " (in 'bhlmm', line 91, column 24 to column 25)",
                                                      " (in 'bhlmm', line 92, column 9 to column 13)",
                                                      " (in 'bhlmm', line 96, column 9 to column 10)",
                                                      " (in 'bhlmm', line 97, column 9 to column 10)",
                                                      " (in 'bhlmm', line 104, column 9 to column 13)",
                                                      " (in 'bhlmm', line 14, column 4 to column 42)",
                                                      " (in 'bhlmm', line 15, column 4 to column 52)",
                                                      " (in 'bhlmm', line 17, column 4 to column 31)",
                                                      " (in 'bhlmm', line 18, column 4 to column 13)",
                                                      " (in 'bhlmm', line 13, column 50 to line 19, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
normal_lb_rng(const T0__& mu, const T1__& sigma, const T2__& lb,
              RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ p_lb;
    p_lb = DUMMY_VAR__;
    
    current_statement__ = 120;
    p_lb = normal_cdf(lb, mu, sigma);
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 121;
    u = (logical_lt(p_lb, 1) ?
           stan::math::promote_scalar<local_scalar_t__>(uniform_rng(p_lb, 1,
                                                          base_rng__)) :
           stan::math::promote_scalar<local_scalar_t__>(1));
    local_scalar_t__ y;
    y = DUMMY_VAR__;
    
    current_statement__ = 122;
    y = (mu + (sigma * Phi(u)));
    current_statement__ = 123;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct normal_lb_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& mu, const T1__& sigma, const T2__& lb,
           RNG& base_rng__, std::ostream* pstream__)  const 
{
return normal_lb_rng(mu, sigma, lb, base_rng__, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_bhlmm final : public model_base_crtp<model_bhlmm> {
private:
  int D;
  int K;
  int M;
  int nSyn;
  Eigen::Matrix<double, -1, 1> xSyn;
  double mean_mu_m;
  double mean_mu_c;
  double prec_mu_m;
  double prec_mu_c;
  double shape_tau_m;
  double rate_tau_m;
  double shape_tau_c;
  double rate_tau_c;
  double shape_tau;
  double rate_tau;
  double slope_lb;
  double alpha_pi;
  double beta_pi;
  double tau_def;
  int nCtrl;
  int nPat;
  int nPts;
  Eigen::Matrix<double, -1, -1> ctrl_mat;
  Eigen::Matrix<double, -1, -1> pat_mat;
  std::vector<int> ctrlIndex;
 
public:
  ~model_bhlmm() { }
  
  inline std::string model_name() const final { return "model_bhlmm"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_bhlmm(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_bhlmm_namespace::model_bhlmm";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 79;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 79;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 80;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 81;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 81;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 82;
      context__.validate_dims("data initialization","nSyn","int",
          context__.to_vec());
      nSyn = std::numeric_limits<int>::min();
      
      current_statement__ = 82;
      nSyn = context__.vals_i("nSyn")[(1 - 1)];
      current_statement__ = 83;
      validate_non_negative_index("xSyn", "nSyn", nSyn);
      current_statement__ = 84;
      context__.validate_dims("data initialization","xSyn","double",
          context__.to_vec(nSyn));
      xSyn = Eigen::Matrix<double, -1, 1>(nSyn);
      stan::math::fill(xSyn, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> xSyn_flat__;
        current_statement__ = 84;
        assign(xSyn_flat__, nil_index_list(), context__.vals_r("xSyn"),
          "assigning variable xSyn_flat__");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
          current_statement__ = 84;
          assign(xSyn, cons_list(index_uni(sym1__), nil_index_list()),
            xSyn_flat__[(pos__ - 1)], "assigning variable xSyn");
          current_statement__ = 84;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 85;
      context__.validate_dims("data initialization","mean_mu_m","double",
          context__.to_vec());
      mean_mu_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 85;
      mean_mu_m = context__.vals_r("mean_mu_m")[(1 - 1)];
      current_statement__ = 86;
      context__.validate_dims("data initialization","mean_mu_c","double",
          context__.to_vec());
      mean_mu_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 86;
      mean_mu_c = context__.vals_r("mean_mu_c")[(1 - 1)];
      current_statement__ = 87;
      context__.validate_dims("data initialization","prec_mu_m","double",
          context__.to_vec());
      prec_mu_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 87;
      prec_mu_m = context__.vals_r("prec_mu_m")[(1 - 1)];
      current_statement__ = 87;
      current_statement__ = 87;
      check_greater_or_equal(function__, "prec_mu_m", prec_mu_m, 0);
      current_statement__ = 88;
      context__.validate_dims("data initialization","prec_mu_c","double",
          context__.to_vec());
      prec_mu_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 88;
      prec_mu_c = context__.vals_r("prec_mu_c")[(1 - 1)];
      current_statement__ = 88;
      current_statement__ = 88;
      check_greater_or_equal(function__, "prec_mu_c", prec_mu_c, 0);
      current_statement__ = 89;
      context__.validate_dims("data initialization","shape_tau_m","double",
          context__.to_vec());
      shape_tau_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 89;
      shape_tau_m = context__.vals_r("shape_tau_m")[(1 - 1)];
      current_statement__ = 89;
      current_statement__ = 89;
      check_greater_or_equal(function__, "shape_tau_m", shape_tau_m, 0);
      current_statement__ = 90;
      context__.validate_dims("data initialization","rate_tau_m","double",
          context__.to_vec());
      rate_tau_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 90;
      rate_tau_m = context__.vals_r("rate_tau_m")[(1 - 1)];
      current_statement__ = 90;
      current_statement__ = 90;
      check_greater_or_equal(function__, "rate_tau_m", rate_tau_m, 0);
      current_statement__ = 91;
      context__.validate_dims("data initialization","shape_tau_c","double",
          context__.to_vec());
      shape_tau_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 91;
      shape_tau_c = context__.vals_r("shape_tau_c")[(1 - 1)];
      current_statement__ = 91;
      current_statement__ = 91;
      check_greater_or_equal(function__, "shape_tau_c", shape_tau_c, 0);
      current_statement__ = 92;
      context__.validate_dims("data initialization","rate_tau_c","double",
          context__.to_vec());
      rate_tau_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 92;
      rate_tau_c = context__.vals_r("rate_tau_c")[(1 - 1)];
      current_statement__ = 92;
      current_statement__ = 92;
      check_greater_or_equal(function__, "rate_tau_c", rate_tau_c, 0);
      current_statement__ = 93;
      context__.validate_dims("data initialization","shape_tau","double",
          context__.to_vec());
      shape_tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 93;
      shape_tau = context__.vals_r("shape_tau")[(1 - 1)];
      current_statement__ = 93;
      current_statement__ = 93;
      check_greater_or_equal(function__, "shape_tau", shape_tau, 0);
      current_statement__ = 94;
      context__.validate_dims("data initialization","rate_tau","double",
          context__.to_vec());
      rate_tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 94;
      rate_tau = context__.vals_r("rate_tau")[(1 - 1)];
      current_statement__ = 94;
      current_statement__ = 94;
      check_greater_or_equal(function__, "rate_tau", rate_tau, 0);
      current_statement__ = 95;
      context__.validate_dims("data initialization","slope_lb","double",
          context__.to_vec());
      slope_lb = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 95;
      slope_lb = context__.vals_r("slope_lb")[(1 - 1)];
      current_statement__ = 96;
      context__.validate_dims("data initialization","alpha_pi","double",
          context__.to_vec());
      alpha_pi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 96;
      alpha_pi = context__.vals_r("alpha_pi")[(1 - 1)];
      current_statement__ = 96;
      current_statement__ = 96;
      check_greater_or_equal(function__, "alpha_pi", alpha_pi, 0);
      current_statement__ = 97;
      context__.validate_dims("data initialization","beta_pi","double",
          context__.to_vec());
      beta_pi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 97;
      beta_pi = context__.vals_r("beta_pi")[(1 - 1)];
      current_statement__ = 97;
      current_statement__ = 97;
      check_greater_or_equal(function__, "beta_pi", beta_pi, 0);
      current_statement__ = 98;
      context__.validate_dims("data initialization","tau_def","double",
          context__.to_vec());
      tau_def = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 98;
      tau_def = context__.vals_r("tau_def")[(1 - 1)];
      current_statement__ = 99;
      context__.validate_dims("data initialization","nCtrl","int",
          context__.to_vec());
      nCtrl = std::numeric_limits<int>::min();
      
      current_statement__ = 99;
      nCtrl = context__.vals_i("nCtrl")[(1 - 1)];
      current_statement__ = 99;
      current_statement__ = 99;
      check_greater_or_equal(function__, "nCtrl", nCtrl, 0);
      current_statement__ = 100;
      context__.validate_dims("data initialization","nPat","int",
          context__.to_vec());
      nPat = std::numeric_limits<int>::min();
      
      current_statement__ = 100;
      nPat = context__.vals_i("nPat")[(1 - 1)];
      current_statement__ = 100;
      current_statement__ = 100;
      check_greater_or_equal(function__, "nPat", nPat, 0);
      current_statement__ = 101;
      context__.validate_dims("data initialization","nPts","int",
          context__.to_vec());
      nPts = std::numeric_limits<int>::min();
      
      current_statement__ = 101;
      nPts = context__.vals_i("nPts")[(1 - 1)];
      current_statement__ = 101;
      current_statement__ = 101;
      check_greater_or_equal(function__, "nPts", nPts, 0);
      current_statement__ = 102;
      validate_non_negative_index("ctrl_mat", "nCtrl", nCtrl);
      current_statement__ = 103;
      validate_non_negative_index("ctrl_mat", "D", D);
      current_statement__ = 104;
      context__.validate_dims("data initialization","ctrl_mat","double",
          context__.to_vec(nCtrl, D));
      ctrl_mat = Eigen::Matrix<double, -1, -1>(nCtrl, D);
      stan::math::fill(ctrl_mat, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ctrl_mat_flat__;
        current_statement__ = 104;
        assign(ctrl_mat_flat__, nil_index_list(),
          context__.vals_r("ctrl_mat"), "assigning variable ctrl_mat_flat__");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= nCtrl; ++sym2__) {
            current_statement__ = 104;
            assign(ctrl_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ctrl_mat_flat__[(pos__ - 1)], "assigning variable ctrl_mat");
            current_statement__ = 104;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 105;
      validate_non_negative_index("pat_mat", "nPat", nPat);
      current_statement__ = 106;
      validate_non_negative_index("pat_mat", "D", D);
      current_statement__ = 107;
      context__.validate_dims("data initialization","pat_mat","double",
          context__.to_vec(nPat, D));
      pat_mat = Eigen::Matrix<double, -1, -1>(nPat, D);
      stan::math::fill(pat_mat, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> pat_mat_flat__;
        current_statement__ = 107;
        assign(pat_mat_flat__, nil_index_list(), context__.vals_r("pat_mat"),
          "assigning variable pat_mat_flat__");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= nPat; ++sym2__) {
            current_statement__ = 107;
            assign(pat_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              pat_mat_flat__[(pos__ - 1)], "assigning variable pat_mat");
            current_statement__ = 107;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 108;
      validate_non_negative_index("ctrlIndex", "nCtrl", nCtrl);
      current_statement__ = 109;
      context__.validate_dims("data initialization","ctrlIndex","int",
          context__.to_vec(nCtrl));
      ctrlIndex = std::vector<int>(nCtrl, std::numeric_limits<int>::min());
      
      current_statement__ = 109;
      assign(ctrlIndex, nil_index_list(), context__.vals_i("ctrlIndex"),
        "assigning variable ctrlIndex");
      current_statement__ = 109;
      for (int sym1__ = 1; sym1__ <= nCtrl; ++sym1__) {
        current_statement__ = 109;
        current_statement__ = 109;
        check_greater_or_equal(function__, "ctrlIndex[sym1__]",
                               ctrlIndex[(sym1__ - 1)], 1);}
      current_statement__ = 109;
      for (int sym1__ = 1; sym1__ <= nCtrl; ++sym1__) {
        current_statement__ = 109;
        current_statement__ = 109;
        check_less_or_equal(function__, "ctrlIndex[sym1__]",
                            ctrlIndex[(sym1__ - 1)], M);}
      current_statement__ = 110;
      validate_non_negative_index("m", "M", M);
      current_statement__ = 111;
      validate_non_negative_index("c", "M", M);
      current_statement__ = 112;
      validate_non_negative_index("classif", "nPat", nPat);
      current_statement__ = 113;
      validate_non_negative_index("probvec", "nPat", nPat);
      current_statement__ = 114;
      validate_non_negative_index("dens", "nPat", nPat);
      current_statement__ = 115;
      validate_non_negative_index("dens", "K", K);
      current_statement__ = 116;
      validate_non_negative_index("yPred", "nSyn", nSyn);
      current_statement__ = 117;
      validate_non_negative_index("m_prior", "M", M);
      current_statement__ = 118;
      validate_non_negative_index("c_prior", "M", M);
      current_statement__ = 119;
      validate_non_negative_index("yPred_prior", "nSyn", nSyn);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += M;
      num_params_r__ += M;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_bhlmm_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> m;
      m = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
      stan::math::fill(m, DUMMY_VAR__);
      
      current_statement__ = 1;
      m = in__.vector(M);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(m, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(m[(sym1__ - 1)], 0, lp__),
            "assigning variable m");
        } else {
          current_statement__ = 1;
          assign(m, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(m[(sym1__ - 1)], 0),
            "assigning variable m");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> c;
      c = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
      stan::math::fill(c, DUMMY_VAR__);
      
      current_statement__ = 2;
      c = in__.vector(M);
      local_scalar_t__ tau_norm;
      tau_norm = DUMMY_VAR__;
      
      current_statement__ = 3;
      tau_norm = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        tau_norm = stan::math::lb_constrain(tau_norm, 0, lp__);
      } else {
        current_statement__ = 3;
        tau_norm = stan::math::lb_constrain(tau_norm, 0);
      }
      local_scalar_t__ mu_m;
      mu_m = DUMMY_VAR__;
      
      current_statement__ = 4;
      mu_m = in__.scalar();
      local_scalar_t__ mu_c;
      mu_c = DUMMY_VAR__;
      
      current_statement__ = 5;
      mu_c = in__.scalar();
      local_scalar_t__ tau_m;
      tau_m = DUMMY_VAR__;
      
      current_statement__ = 6;
      tau_m = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        tau_m = stan::math::lb_constrain(tau_m, 0, lp__);
      } else {
        current_statement__ = 6;
        tau_m = stan::math::lb_constrain(tau_m, 0);
      }
      local_scalar_t__ tau_c;
      tau_c = DUMMY_VAR__;
      
      current_statement__ = 7;
      tau_c = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        tau_c = stan::math::lb_constrain(tau_c, 0, lp__);
      } else {
        current_statement__ = 7;
        tau_c = stan::math::lb_constrain(tau_c, 0);
      }
      local_scalar_t__ probdiff;
      probdiff = DUMMY_VAR__;
      
      current_statement__ = 8;
      probdiff = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        probdiff = stan::math::lub_constrain(probdiff, 0, 1, lp__);
      } else {
        current_statement__ = 8;
        probdiff = stan::math::lub_constrain(probdiff, 0, 1);
      }
      {
        local_scalar_t__ sigma_norm;
        sigma_norm = DUMMY_VAR__;
        
        local_scalar_t__ sigma_def;
        sigma_def = DUMMY_VAR__;
        
        current_statement__ = 60;
        lp_accum__.add(
          normal_lpdf<propto__>(mu_m, mean_mu_m,
            (1 / stan::math::sqrt(prec_mu_m))));
        current_statement__ = 61;
        lp_accum__.add(
          normal_lpdf<propto__>(mu_c, mean_mu_c,
            (1 / stan::math::sqrt(prec_mu_c))));
        current_statement__ = 62;
        lp_accum__.add(gamma_lpdf<propto__>(tau_m, shape_tau_m, rate_tau_m));
        current_statement__ = 63;
        lp_accum__.add(gamma_lpdf<propto__>(tau_c, shape_tau_c, rate_tau_c));
        current_statement__ = 68;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 64;
          if (logical_lt(m[(i - 1)], slope_lb)) {
            current_statement__ = 64;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 64;
            lp_accum__.add(
              -normal_ccdf_log(slope_lb, mu_m, (1 / stan::math::sqrt(tau_m))));
          }
          current_statement__ = 65;
          lp_accum__.add(
            normal_lpdf<propto__>(m[(i - 1)], mu_m,
              (1 / stan::math::sqrt(tau_m))));
          current_statement__ = 66;
          lp_accum__.add(
            normal_lpdf<propto__>(c[(i - 1)], mu_c,
              (1 / stan::math::sqrt(tau_c))));}
        current_statement__ = 69;
        lp_accum__.add(beta_lpdf<propto__>(probdiff, alpha_pi, beta_pi));
        current_statement__ = 70;
        lp_accum__.add(gamma_lpdf<propto__>(tau_norm, shape_tau, rate_tau));
        current_statement__ = 71;
        sigma_norm = (1 / stan::math::sqrt(tau_norm));
        current_statement__ = 72;
        sigma_def = (1 / stan::math::sqrt(tau_def));
        current_statement__ = 75;
        for (int i = 1; i <= nCtrl; ++i) {
          current_statement__ = 73;
          lp_accum__.add(
            normal_lpdf<false>(
              rvalue(ctrl_mat,
                cons_list(index_uni(i),
                  cons_list(index_uni(2), nil_index_list())), "ctrl_mat"),
              ((m[(ctrlIndex[(i - 1)] - 1)] *
                 rvalue(ctrl_mat,
                   cons_list(index_uni(i),
                     cons_list(index_uni(1), nil_index_list())), "ctrl_mat"))
                + c[(ctrlIndex[(i - 1)] - 1)]), sigma_norm));}
        current_statement__ = 78;
        for (int j = 1; j <= nPat; ++j) {
          current_statement__ = 76;
          lp_accum__.add(
            log_mix(probdiff,
              normal_lpdf<false>(
                rvalue(pat_mat,
                  cons_list(index_uni(j),
                    cons_list(index_uni(2), nil_index_list())), "pat_mat"),
                ((m[(M - 1)] *
                   rvalue(pat_mat,
                     cons_list(index_uni(j),
                       cons_list(index_uni(1), nil_index_list())), "pat_mat"))
                  + c[(M - 1)]), sigma_def),
              normal_lpdf<false>(
                rvalue(pat_mat,
                  cons_list(index_uni(j),
                    cons_list(index_uni(2), nil_index_list())), "pat_mat"),
                ((m[(M - 1)] *
                   rvalue(pat_mat,
                     cons_list(index_uni(j),
                       cons_list(index_uni(1), nil_index_list())), "pat_mat"))
                  + c[(M - 1)]), sigma_norm)));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_bhlmm_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> m;
      m = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(m, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      m = in__.vector(M);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        assign(m, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(m[(sym1__ - 1)], 0),
          "assigning variable m");}
      Eigen::Matrix<double, -1, 1> c;
      c = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(c, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      c = in__.vector(M);
      double tau_norm;
      tau_norm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_norm = in__.scalar();
      current_statement__ = 3;
      tau_norm = stan::math::lb_constrain(tau_norm, 0);
      double mu_m;
      mu_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_m = in__.scalar();
      double mu_c;
      mu_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mu_c = in__.scalar();
      double tau_m;
      tau_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_m = in__.scalar();
      current_statement__ = 6;
      tau_m = stan::math::lb_constrain(tau_m, 0);
      double tau_c;
      tau_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      tau_c = in__.scalar();
      current_statement__ = 7;
      tau_c = stan::math::lb_constrain(tau_c, 0);
      double probdiff;
      probdiff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      probdiff = in__.scalar();
      current_statement__ = 8;
      probdiff = stan::math::lub_constrain(probdiff, 0, 1);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(m[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(c[(sym1__ - 1)]);}
      vars__.emplace_back(tau_norm);
      vars__.emplace_back(mu_m);
      vars__.emplace_back(mu_c);
      vars__.emplace_back(tau_m);
      vars__.emplace_back(tau_c);
      vars__.emplace_back(probdiff);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double log_probDef_tmp;
      log_probDef_tmp = std::numeric_limits<double>::quiet_NaN();
      
      double log_probHealthy_tmp;
      log_probHealthy_tmp = std::numeric_limits<double>::quiet_NaN();
      
      double sigma_norm_tmp;
      sigma_norm_tmp = std::numeric_limits<double>::quiet_NaN();
      
      double sigma_def_tmp;
      sigma_def_tmp = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<int> classif;
      classif = std::vector<int>(nPat, std::numeric_limits<int>::min());
      
      Eigen::Matrix<double, -1, 1> probvec;
      probvec = Eigen::Matrix<double, -1, 1>(nPat);
      stan::math::fill(probvec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> dens;
      dens = Eigen::Matrix<double, -1, -1>(nPat, K);
      stan::math::fill(dens, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> yPred;
      yPred = Eigen::Matrix<double, -1, 1>(nSyn);
      stan::math::fill(yPred, std::numeric_limits<double>::quiet_NaN());
      
      double m_pred;
      m_pred = std::numeric_limits<double>::quiet_NaN();
      
      double c_pred;
      c_pred = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> m_prior;
      m_prior = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(m_prior, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> c_prior;
      c_prior = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(c_prior, std::numeric_limits<double>::quiet_NaN());
      
      double tau_norm_prior;
      tau_norm_prior = std::numeric_limits<double>::quiet_NaN();
      
      double mu_m_prior;
      mu_m_prior = std::numeric_limits<double>::quiet_NaN();
      
      double mu_c_prior;
      mu_c_prior = std::numeric_limits<double>::quiet_NaN();
      
      double tau_m_prior;
      tau_m_prior = std::numeric_limits<double>::quiet_NaN();
      
      double tau_c_prior;
      tau_c_prior = std::numeric_limits<double>::quiet_NaN();
      
      double probdiff_prior;
      probdiff_prior = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> yPred_prior;
      yPred_prior = Eigen::Matrix<double, -1, 1>(nSyn);
      stan::math::fill(yPred_prior, std::numeric_limits<double>::quiet_NaN());
      
      double m_pred_prior;
      m_pred_prior = std::numeric_limits<double>::quiet_NaN();
      
      double c_pred_prior;
      c_pred_prior = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 30;
      log_probDef_tmp = stan::math::log(probdiff);
      current_statement__ = 31;
      log_probHealthy_tmp = stan::math::log((1 - probdiff));
      current_statement__ = 32;
      sigma_norm_tmp = (1 / stan::math::sqrt(tau_norm));
      current_statement__ = 33;
      sigma_def_tmp = (1 / stan::math::sqrt(tau_def));
      current_statement__ = 38;
      for (int j = 1; j <= nPat; ++j) {
        current_statement__ = 34;
        assign(dens,
          cons_list(index_uni(j), cons_list(index_uni(1), nil_index_list())),
          stan::math::exp(
            (log_probHealthy_tmp +
              normal_lpdf<false>(
                rvalue(pat_mat,
                  cons_list(index_uni(j),
                    cons_list(index_uni(2), nil_index_list())), "pat_mat"),
                ((m[(M - 1)] *
                   rvalue(pat_mat,
                     cons_list(index_uni(j),
                       cons_list(index_uni(1), nil_index_list())), "pat_mat"))
                  + c[(M - 1)]), sigma_norm_tmp))), "assigning variable dens");
        current_statement__ = 35;
        assign(dens,
          cons_list(index_uni(j), cons_list(index_uni(2), nil_index_list())),
          stan::math::exp(
            (log_probDef_tmp +
              normal_lpdf<false>(
                rvalue(pat_mat,
                  cons_list(index_uni(j),
                    cons_list(index_uni(2), nil_index_list())), "pat_mat"),
                ((m[(M - 1)] *
                   rvalue(pat_mat,
                     cons_list(index_uni(j),
                       cons_list(index_uni(1), nil_index_list())), "pat_mat"))
                  + c[(M - 1)]), sigma_def_tmp))), "assigning variable dens");
        current_statement__ = 36;
        assign(probvec, cons_list(index_uni(j), nil_index_list()),
          (rvalue(dens,
             cons_list(index_uni(j),
               cons_list(index_uni(2), nil_index_list())), "dens") /
            sum(
              rvalue(dens,
                cons_list(index_uni(j),
                  cons_list(index_omni(), nil_index_list())), "dens"))),
          "assigning variable probvec");}
      current_statement__ = 39;
      assign(classif, nil_index_list(), bernoulli_rng(probvec, base_rng__),
        "assigning variable classif");
      current_statement__ = 40;
      mu_m_prior = normal_rng(mean_mu_m, (1 / stan::math::sqrt(prec_mu_m)),
                     base_rng__);
      current_statement__ = 41;
      mu_c_prior = normal_rng(mean_mu_c, (1 / stan::math::sqrt(prec_mu_c)),
                     base_rng__);
      current_statement__ = 42;
      tau_m_prior = gamma_rng(shape_tau_m, rate_tau_m, base_rng__);
      current_statement__ = 43;
      tau_c_prior = gamma_rng(shape_tau_c, rate_tau_c, base_rng__);
      current_statement__ = 47;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 44;
        assign(m_prior, cons_list(index_uni(i), nil_index_list()),
          normal_lb_rng(mu_m_prior, (1 / stan::math::sqrt(tau_m_prior)),
            slope_lb, base_rng__, pstream__), "assigning variable m_prior");
        current_statement__ = 45;
        assign(c_prior, cons_list(index_uni(i), nil_index_list()),
          normal_rng(mu_c_prior, (1 / stan::math::sqrt(tau_c_prior)),
            base_rng__), "assigning variable c_prior");}
      current_statement__ = 48;
      m_pred_prior = normal_lb_rng(mu_m_prior,
                       (1 / stan::math::sqrt(tau_m_prior)),
                       slope_lb, base_rng__, pstream__);
      current_statement__ = 49;
      c_pred_prior = normal_rng(mu_c_prior,
                       (1 / stan::math::sqrt(tau_c_prior)), base_rng__);
      current_statement__ = 50;
      tau_norm_prior = gamma_rng(shape_tau, rate_tau, base_rng__);
      current_statement__ = 51;
      probdiff_prior = beta_rng(alpha_pi, beta_pi, base_rng__);
      current_statement__ = 52;
      m_pred = normal_lb_rng(mu_m, (1 / stan::math::sqrt(tau_m)),
                 slope_lb, base_rng__, pstream__);
      current_statement__ = 53;
      c_pred = normal_rng(mu_c, (1 / stan::math::sqrt(tau_c)), base_rng__);
      current_statement__ = 57;
      for (int k = 1; k <= nSyn; ++k) {
        current_statement__ = 54;
        assign(yPred, cons_list(index_uni(k), nil_index_list()),
          normal_rng(((m[(M - 1)] * xSyn[(k - 1)]) + c[(M - 1)]),
            sigma_norm_tmp, base_rng__), "assigning variable yPred");
        current_statement__ = 55;
        assign(yPred_prior, cons_list(index_uni(k), nil_index_list()),
          normal_rng(((m_prior[(M - 1)] * xSyn[(k - 1)]) + c_prior[(M - 1)]),
            (1 / stan::math::sqrt(tau_norm_prior)), base_rng__),
          "assigning variable yPred_prior");}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_greater_or_equal(function__, "classif[sym1__]",
                               classif[(sym1__ - 1)], 0);}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_less_or_equal(function__, "classif[sym1__]",
                            classif[(sym1__ - 1)], 1);}
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_greater_or_equal(function__, "probvec[sym1__]",
                               probvec[(sym1__ - 1)], 0);}
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_less_or_equal(function__, "probvec[sym1__]",
                            probvec[(sym1__ - 1)], 1);}
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        current_statement__ = 15;
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          current_statement__ = 15;
          current_statement__ = 15;
          check_greater_or_equal(function__, "dens[sym1__, sym2__]",
                                 rvalue(dens,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "dens"), 0);}}
      current_statement__ = 21;
      current_statement__ = 21;
      check_greater_or_equal(function__, "tau_norm_prior", tau_norm_prior, 0);
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "tau_m_prior", tau_m_prior, 0);
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "tau_c_prior", tau_c_prior, 0);
      current_statement__ = 26;
      current_statement__ = 26;
      check_greater_or_equal(function__, "probdiff_prior", probdiff_prior, 0);
      current_statement__ = 26;
      current_statement__ = 26;
      check_less_or_equal(function__, "probdiff_prior", probdiff_prior, 1);
      vars__.emplace_back(log_probDef_tmp);
      vars__.emplace_back(log_probHealthy_tmp);
      vars__.emplace_back(sigma_norm_tmp);
      vars__.emplace_back(sigma_def_tmp);
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        vars__.emplace_back(classif[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        vars__.emplace_back(probvec[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nPat; ++sym2__) {
          vars__.emplace_back(
            rvalue(dens,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "dens"));}}
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        vars__.emplace_back(yPred[(sym1__ - 1)]);}
      vars__.emplace_back(m_pred);
      vars__.emplace_back(c_pred);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(m_prior[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(c_prior[(sym1__ - 1)]);}
      vars__.emplace_back(tau_norm_prior);
      vars__.emplace_back(mu_m_prior);
      vars__.emplace_back(mu_c_prior);
      vars__.emplace_back(tau_m_prior);
      vars__.emplace_back(tau_c_prior);
      vars__.emplace_back(probdiff_prior);
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        vars__.emplace_back(yPred_prior[(sym1__ - 1)]);}
      vars__.emplace_back(m_pred_prior);
      vars__.emplace_back(c_pred_prior);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> m;
      m = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(m, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> m_flat__;
        current_statement__ = 1;
        assign(m_flat__, nil_index_list(), context__.vals_r("m"),
          "assigning variable m_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 1;
          assign(m, cons_list(index_uni(sym1__), nil_index_list()),
            m_flat__[(pos__ - 1)], "assigning variable m");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> m_free__;
      m_free__ = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(m_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        assign(m_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(m[(sym1__ - 1)], 0),
          "assigning variable m_free__");}
      Eigen::Matrix<double, -1, 1> c;
      c = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(c, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> c_flat__;
        current_statement__ = 2;
        assign(c_flat__, nil_index_list(), context__.vals_r("c"),
          "assigning variable c_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          assign(c, cons_list(index_uni(sym1__), nil_index_list()),
            c_flat__[(pos__ - 1)], "assigning variable c");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      double tau_norm;
      tau_norm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_norm = context__.vals_r("tau_norm")[(1 - 1)];
      double tau_norm_free__;
      tau_norm_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_norm_free__ = stan::math::lb_free(tau_norm, 0);
      double mu_m;
      mu_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_m = context__.vals_r("mu_m")[(1 - 1)];
      double mu_c;
      mu_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mu_c = context__.vals_r("mu_c")[(1 - 1)];
      double tau_m;
      tau_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_m = context__.vals_r("tau_m")[(1 - 1)];
      double tau_m_free__;
      tau_m_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_m_free__ = stan::math::lb_free(tau_m, 0);
      double tau_c;
      tau_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      tau_c = context__.vals_r("tau_c")[(1 - 1)];
      double tau_c_free__;
      tau_c_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      tau_c_free__ = stan::math::lb_free(tau_c, 0);
      double probdiff;
      probdiff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      probdiff = context__.vals_r("probdiff")[(1 - 1)];
      double probdiff_free__;
      probdiff_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      probdiff_free__ = stan::math::lub_free(probdiff, 0, 1);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(m_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(c[(sym1__ - 1)]);}
      vars__.emplace_back(tau_norm_free__);
      vars__.emplace_back(mu_m);
      vars__.emplace_back(mu_c);
      vars__.emplace_back(tau_m_free__);
      vars__.emplace_back(tau_c_free__);
      vars__.emplace_back(probdiff_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("m");
    names__.emplace_back("c");
    names__.emplace_back("tau_norm");
    names__.emplace_back("mu_m");
    names__.emplace_back("mu_c");
    names__.emplace_back("tau_m");
    names__.emplace_back("tau_c");
    names__.emplace_back("probdiff");
    names__.emplace_back("log_probDef_tmp");
    names__.emplace_back("log_probHealthy_tmp");
    names__.emplace_back("sigma_norm_tmp");
    names__.emplace_back("sigma_def_tmp");
    names__.emplace_back("classif");
    names__.emplace_back("probvec");
    names__.emplace_back("dens");
    names__.emplace_back("yPred");
    names__.emplace_back("m_pred");
    names__.emplace_back("c_pred");
    names__.emplace_back("m_prior");
    names__.emplace_back("c_prior");
    names__.emplace_back("tau_norm_prior");
    names__.emplace_back("mu_m_prior");
    names__.emplace_back("mu_c_prior");
    names__.emplace_back("tau_m_prior");
    names__.emplace_back("tau_c_prior");
    names__.emplace_back("probdiff_prior");
    names__.emplace_back("yPred_prior");
    names__.emplace_back("m_pred_prior");
    names__.emplace_back("c_pred_prior");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nPat)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nPat)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nPat),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSyn)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSyn)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "m" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "tau_norm");
    param_names__.emplace_back(std::string() + "mu_m");
    param_names__.emplace_back(std::string() + "mu_c");
    param_names__.emplace_back(std::string() + "tau_m");
    param_names__.emplace_back(std::string() + "tau_c");
    param_names__.emplace_back(std::string() + "probdiff");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "log_probDef_tmp");
      param_names__.emplace_back(std::string() + "log_probHealthy_tmp");
      param_names__.emplace_back(std::string() + "sigma_norm_tmp");
      param_names__.emplace_back(std::string() + "sigma_def_tmp");
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "classif" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "probvec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nPat; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dens" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yPred" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "m_pred");
      param_names__.emplace_back(std::string() + "c_pred");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m_prior" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_prior" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "tau_norm_prior");
      param_names__.emplace_back(std::string() + "mu_m_prior");
      param_names__.emplace_back(std::string() + "mu_c_prior");
      param_names__.emplace_back(std::string() + "tau_m_prior");
      param_names__.emplace_back(std::string() + "tau_c_prior");
      param_names__.emplace_back(std::string() + "probdiff_prior");
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yPred_prior" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "m_pred_prior");
      param_names__.emplace_back(std::string() + "c_pred_prior");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "m" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "tau_norm");
    param_names__.emplace_back(std::string() + "mu_m");
    param_names__.emplace_back(std::string() + "mu_c");
    param_names__.emplace_back(std::string() + "tau_m");
    param_names__.emplace_back(std::string() + "tau_c");
    param_names__.emplace_back(std::string() + "probdiff");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "log_probDef_tmp");
      param_names__.emplace_back(std::string() + "log_probHealthy_tmp");
      param_names__.emplace_back(std::string() + "sigma_norm_tmp");
      param_names__.emplace_back(std::string() + "sigma_def_tmp");
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "classif" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "probvec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nPat; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dens" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yPred" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "m_pred");
      param_names__.emplace_back(std::string() + "c_pred");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m_prior" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_prior" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "tau_norm_prior");
      param_names__.emplace_back(std::string() + "mu_m_prior");
      param_names__.emplace_back(std::string() + "mu_c_prior");
      param_names__.emplace_back(std::string() + "tau_m_prior");
      param_names__.emplace_back(std::string() + "tau_c_prior");
      param_names__.emplace_back(std::string() + "probdiff_prior");
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yPred_prior" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "m_pred_prior");
      param_names__.emplace_back(std::string() + "c_pred_prior");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"m\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"parameters\"},{\"name\":\"tau_norm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"probdiff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_probDef_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_probHealthy_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_norm_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_def_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"classif\",\"type\":{\"name\":\"array\",\"length\":" << nPat << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"probvec\",\"type\":{\"name\":\"vector\",\"length\":" << nPat << "},\"block\":\"generated_quantities\"},{\"name\":\"dens\",\"type\":{\"name\":\"matrix\",\"rows\":" << nPat << ",\"cols\":" << K << "},\"block\":\"generated_quantities\"},{\"name\":\"yPred\",\"type\":{\"name\":\"vector\",\"length\":" << nSyn << "},\"block\":\"generated_quantities\"},{\"name\":\"m_pred\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"c_pred\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"m_prior\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"c_prior\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"tau_norm_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_m_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_c_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_m_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_c_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"probdiff_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"yPred_prior\",\"type\":{\"name\":\"vector\",\"length\":" << nSyn << "},\"block\":\"generated_quantities\"},{\"name\":\"m_pred_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"c_pred_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"m\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"parameters\"},{\"name\":\"tau_norm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"probdiff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_probDef_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_probHealthy_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_norm_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_def_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"classif\",\"type\":{\"name\":\"array\",\"length\":" << nPat << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"probvec\",\"type\":{\"name\":\"vector\",\"length\":" << nPat << "},\"block\":\"generated_quantities\"},{\"name\":\"dens\",\"type\":{\"name\":\"matrix\",\"rows\":" << nPat << ",\"cols\":" << K << "},\"block\":\"generated_quantities\"},{\"name\":\"yPred\",\"type\":{\"name\":\"vector\",\"length\":" << nSyn << "},\"block\":\"generated_quantities\"},{\"name\":\"m_pred\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"c_pred\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"m_prior\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"c_prior\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"generated_quantities\"},{\"name\":\"tau_norm_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_m_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_c_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_m_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_c_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"probdiff_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"yPred_prior\",\"type\":{\"name\":\"vector\",\"length\":" << nSyn << "},\"block\":\"generated_quantities\"},{\"name\":\"m_pred_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"c_pred_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_bhlmm_namespace::model_bhlmm;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_bhlmm_namespace::profiles__;
}
#endif
#endif
