// Generated by rstantools.  Do not edit by hand.

/*
    analysis2Dmito is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    analysis2Dmito is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with analysis2Dmito.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_bhlmm_stan_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bhlmm_stan");
    reader.add_event(163, 161, "end", "model_bhlmm_stan");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
normal_lb_rng(const T0__& mu,
                  const T1__& sigma,
                  const T2__& lb, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 14;
        local_scalar_t__ p_lb(DUMMY_VAR__);
        (void) p_lb;  // dummy to suppress unused var warning
        stan::math::initialize(p_lb, DUMMY_VAR__);
        stan::math::fill(p_lb, DUMMY_VAR__);
        stan::math::assign(p_lb,normal_cdf(lb, mu, sigma));
        current_statement_begin__ = 15;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        stan::math::assign(u,(logical_lt(p_lb, 1) ? stan::math::promote_scalar<local_scalar_t__>(uniform_rng(p_lb, 1, base_rng__)) : stan::math::promote_scalar<local_scalar_t__>(1) ));
        current_statement_begin__ = 17;
        local_scalar_t__ y(DUMMY_VAR__);
        (void) y;  // dummy to suppress unused var warning
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,(mu + (sigma * Phi(u))));
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct normal_lb_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& mu,
                  const T1__& sigma,
                  const T2__& lb, RNG& base_rng__, std::ostream* pstream__) const {
        return normal_lb_rng(mu, sigma, lb, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_bhlmm_stan
  : public stan::model::model_base_crtp<model_bhlmm_stan> {
private:
        int D;
        int K;
        int M;
        int nSyn;
        vector_d xSyn;
        double mean_mu_m;
        double mean_mu_c;
        double prec_mu_m;
        double prec_mu_c;
        double shape_tau_m;
        double rate_tau_m;
        double shape_tau_c;
        double rate_tau_c;
        double shape_tau;
        double rate_tau;
        double slope_lb;
        double alpha_pi;
        double beta_pi;
        double tau_def;
        int nCtrl;
        int nPat;
        int nPts;
        matrix_d ctrl_mat;
        matrix_d pat_mat;
        std::vector<int> ctrlIndex;
public:
    model_bhlmm_stan(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_bhlmm_stan(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_bhlmm_stan_namespace::model_bhlmm_stan";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "nSyn", "int", context__.to_vec());
            nSyn = int(0);
            vals_i__ = context__.vals_i("nSyn");
            pos__ = 0;
            nSyn = vals_i__[pos__++];
            current_statement_begin__ = 27;
            validate_non_negative_index("xSyn", "nSyn", nSyn);
            context__.validate_dims("data initialization", "xSyn", "vector_d", context__.to_vec(nSyn));
            xSyn = Eigen::Matrix<double, Eigen::Dynamic, 1>(nSyn);
            vals_r__ = context__.vals_r("xSyn");
            pos__ = 0;
            size_t xSyn_j_1_max__ = nSyn;
            for (size_t j_1__ = 0; j_1__ < xSyn_j_1_max__; ++j_1__) {
                xSyn(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "mean_mu_m", "double", context__.to_vec());
            mean_mu_m = double(0);
            vals_r__ = context__.vals_r("mean_mu_m");
            pos__ = 0;
            mean_mu_m = vals_r__[pos__++];
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "mean_mu_c", "double", context__.to_vec());
            mean_mu_c = double(0);
            vals_r__ = context__.vals_r("mean_mu_c");
            pos__ = 0;
            mean_mu_c = vals_r__[pos__++];
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "prec_mu_m", "double", context__.to_vec());
            prec_mu_m = double(0);
            vals_r__ = context__.vals_r("prec_mu_m");
            pos__ = 0;
            prec_mu_m = vals_r__[pos__++];
            check_greater_or_equal(function__, "prec_mu_m", prec_mu_m, 0);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "prec_mu_c", "double", context__.to_vec());
            prec_mu_c = double(0);
            vals_r__ = context__.vals_r("prec_mu_c");
            pos__ = 0;
            prec_mu_c = vals_r__[pos__++];
            check_greater_or_equal(function__, "prec_mu_c", prec_mu_c, 0);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "shape_tau_m", "double", context__.to_vec());
            shape_tau_m = double(0);
            vals_r__ = context__.vals_r("shape_tau_m");
            pos__ = 0;
            shape_tau_m = vals_r__[pos__++];
            check_greater_or_equal(function__, "shape_tau_m", shape_tau_m, 0);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "rate_tau_m", "double", context__.to_vec());
            rate_tau_m = double(0);
            vals_r__ = context__.vals_r("rate_tau_m");
            pos__ = 0;
            rate_tau_m = vals_r__[pos__++];
            check_greater_or_equal(function__, "rate_tau_m", rate_tau_m, 0);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "shape_tau_c", "double", context__.to_vec());
            shape_tau_c = double(0);
            vals_r__ = context__.vals_r("shape_tau_c");
            pos__ = 0;
            shape_tau_c = vals_r__[pos__++];
            check_greater_or_equal(function__, "shape_tau_c", shape_tau_c, 0);
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "rate_tau_c", "double", context__.to_vec());
            rate_tau_c = double(0);
            vals_r__ = context__.vals_r("rate_tau_c");
            pos__ = 0;
            rate_tau_c = vals_r__[pos__++];
            check_greater_or_equal(function__, "rate_tau_c", rate_tau_c, 0);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "shape_tau", "double", context__.to_vec());
            shape_tau = double(0);
            vals_r__ = context__.vals_r("shape_tau");
            pos__ = 0;
            shape_tau = vals_r__[pos__++];
            check_greater_or_equal(function__, "shape_tau", shape_tau, 0);
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "rate_tau", "double", context__.to_vec());
            rate_tau = double(0);
            vals_r__ = context__.vals_r("rate_tau");
            pos__ = 0;
            rate_tau = vals_r__[pos__++];
            check_greater_or_equal(function__, "rate_tau", rate_tau, 0);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "slope_lb", "double", context__.to_vec());
            slope_lb = double(0);
            vals_r__ = context__.vals_r("slope_lb");
            pos__ = 0;
            slope_lb = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "alpha_pi", "double", context__.to_vec());
            alpha_pi = double(0);
            vals_r__ = context__.vals_r("alpha_pi");
            pos__ = 0;
            alpha_pi = vals_r__[pos__++];
            check_greater_or_equal(function__, "alpha_pi", alpha_pi, 0);
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "beta_pi", "double", context__.to_vec());
            beta_pi = double(0);
            vals_r__ = context__.vals_r("beta_pi");
            pos__ = 0;
            beta_pi = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_pi", beta_pi, 0);
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "tau_def", "double", context__.to_vec());
            tau_def = double(0);
            vals_r__ = context__.vals_r("tau_def");
            pos__ = 0;
            tau_def = vals_r__[pos__++];
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "nCtrl", "int", context__.to_vec());
            nCtrl = int(0);
            vals_i__ = context__.vals_i("nCtrl");
            pos__ = 0;
            nCtrl = vals_i__[pos__++];
            check_greater_or_equal(function__, "nCtrl", nCtrl, 0);
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "nPat", "int", context__.to_vec());
            nPat = int(0);
            vals_i__ = context__.vals_i("nPat");
            pos__ = 0;
            nPat = vals_i__[pos__++];
            check_greater_or_equal(function__, "nPat", nPat, 0);
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "nPts", "int", context__.to_vec());
            nPts = int(0);
            vals_i__ = context__.vals_i("nPts");
            pos__ = 0;
            nPts = vals_i__[pos__++];
            check_greater_or_equal(function__, "nPts", nPts, 0);
            current_statement_begin__ = 50;
            validate_non_negative_index("ctrl_mat", "nCtrl", nCtrl);
            validate_non_negative_index("ctrl_mat", "D", D);
            context__.validate_dims("data initialization", "ctrl_mat", "matrix_d", context__.to_vec(nCtrl,D));
            ctrl_mat = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nCtrl, D);
            vals_r__ = context__.vals_r("ctrl_mat");
            pos__ = 0;
            size_t ctrl_mat_j_2_max__ = D;
            size_t ctrl_mat_j_1_max__ = nCtrl;
            for (size_t j_2__ = 0; j_2__ < ctrl_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ctrl_mat_j_1_max__; ++j_1__) {
                    ctrl_mat(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 51;
            validate_non_negative_index("pat_mat", "nPat", nPat);
            validate_non_negative_index("pat_mat", "D", D);
            context__.validate_dims("data initialization", "pat_mat", "matrix_d", context__.to_vec(nPat,D));
            pat_mat = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nPat, D);
            vals_r__ = context__.vals_r("pat_mat");
            pos__ = 0;
            size_t pat_mat_j_2_max__ = D;
            size_t pat_mat_j_1_max__ = nPat;
            for (size_t j_2__ = 0; j_2__ < pat_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pat_mat_j_1_max__; ++j_1__) {
                    pat_mat(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 52;
            validate_non_negative_index("ctrlIndex", "nCtrl", nCtrl);
            context__.validate_dims("data initialization", "ctrlIndex", "int", context__.to_vec(nCtrl));
            ctrlIndex = std::vector<int>(nCtrl, int(0));
            vals_i__ = context__.vals_i("ctrlIndex");
            pos__ = 0;
            size_t ctrlIndex_k_0_max__ = nCtrl;
            for (size_t k_0__ = 0; k_0__ < ctrlIndex_k_0_max__; ++k_0__) {
                ctrlIndex[k_0__] = vals_i__[pos__++];
            }
            size_t ctrlIndex_i_0_max__ = nCtrl;
            for (size_t i_0__ = 0; i_0__ < ctrlIndex_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ctrlIndex[i_0__]", ctrlIndex[i_0__], 1);
                check_less_or_equal(function__, "ctrlIndex[i_0__]", ctrlIndex[i_0__], M);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 55;
            validate_non_negative_index("m", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 56;
            validate_non_negative_index("c", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 57;
            num_params_r__ += 1;
            current_statement_begin__ = 59;
            num_params_r__ += 1;
            current_statement_begin__ = 60;
            num_params_r__ += 1;
            current_statement_begin__ = 61;
            num_params_r__ += 1;
            current_statement_begin__ = 62;
            num_params_r__ += 1;
            current_statement_begin__ = 64;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_bhlmm_stan() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 55;
        if (!(context__.contains_r("m")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable m missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("m");
        pos__ = 0U;
        validate_non_negative_index("m", "M", M);
        context__.validate_dims("parameter initialization", "m", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> m(M);
        size_t m_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
            m(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, m);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable m: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("c");
        pos__ = 0U;
        validate_non_negative_index("c", "M", M);
        context__.validate_dims("parameter initialization", "c", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> c(M);
        size_t c_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < c_j_1_max__; ++j_1__) {
            c(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("tau_norm")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_norm missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_norm");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_norm", "double", context__.to_vec());
        double tau_norm(0);
        tau_norm = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_norm);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_norm: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("mu_m")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_m missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_m");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_m", "double", context__.to_vec());
        double mu_m(0);
        mu_m = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_m);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_m: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("mu_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_c", "double", context__.to_vec());
        double mu_c(0);
        mu_c = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("tau_m")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_m missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_m");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_m", "double", context__.to_vec());
        double tau_m(0);
        tau_m = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_m);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_m: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("tau_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_c", "double", context__.to_vec());
        double tau_c(0);
        tau_c = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("probdiff")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable probdiff missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("probdiff");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "probdiff", "double", context__.to_vec());
        double probdiff(0);
        probdiff = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, probdiff);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable probdiff: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> m;
            (void) m;  // dummy to suppress unused var warning
            if (jacobian__)
                m = in__.vector_lb_constrain(0, M, lp__);
            else
                m = in__.vector_lb_constrain(0, M);
            current_statement_begin__ = 56;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> c;
            (void) c;  // dummy to suppress unused var warning
            if (jacobian__)
                c = in__.vector_constrain(M, lp__);
            else
                c = in__.vector_constrain(M);
            current_statement_begin__ = 57;
            local_scalar_t__ tau_norm;
            (void) tau_norm;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_norm = in__.scalar_lb_constrain(0, lp__);
            else
                tau_norm = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 59;
            local_scalar_t__ mu_m;
            (void) mu_m;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_m = in__.scalar_constrain(lp__);
            else
                mu_m = in__.scalar_constrain();
            current_statement_begin__ = 60;
            local_scalar_t__ mu_c;
            (void) mu_c;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_c = in__.scalar_constrain(lp__);
            else
                mu_c = in__.scalar_constrain();
            current_statement_begin__ = 61;
            local_scalar_t__ tau_m;
            (void) tau_m;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_m = in__.scalar_lb_constrain(0, lp__);
            else
                tau_m = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 62;
            local_scalar_t__ tau_c;
            (void) tau_c;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_c = in__.scalar_lb_constrain(0, lp__);
            else
                tau_c = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 64;
            local_scalar_t__ probdiff;
            (void) probdiff;  // dummy to suppress unused var warning
            if (jacobian__)
                probdiff = in__.scalar_lub_constrain(0, 1, lp__);
            else
                probdiff = in__.scalar_lub_constrain(0, 1);
            // model body
            {
            current_statement_begin__ = 67;
            local_scalar_t__ sigma_norm(DUMMY_VAR__);
            (void) sigma_norm;  // dummy to suppress unused var warning
            stan::math::initialize(sigma_norm, DUMMY_VAR__);
            stan::math::fill(sigma_norm, DUMMY_VAR__);
            current_statement_begin__ = 68;
            local_scalar_t__ sigma_def(DUMMY_VAR__);
            (void) sigma_def;  // dummy to suppress unused var warning
            stan::math::initialize(sigma_def, DUMMY_VAR__);
            stan::math::fill(sigma_def, DUMMY_VAR__);
            current_statement_begin__ = 70;
            lp_accum__.add(normal_log<propto__>(mu_m, mean_mu_m, (1 / stan::math::sqrt(prec_mu_m))));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log<propto__>(mu_c, mean_mu_c, (1 / stan::math::sqrt(prec_mu_c))));
            current_statement_begin__ = 72;
            lp_accum__.add(gamma_log<propto__>(tau_m, shape_tau_m, rate_tau_m));
            current_statement_begin__ = 73;
            lp_accum__.add(gamma_log<propto__>(tau_c, shape_tau_c, rate_tau_c));
            current_statement_begin__ = 75;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 76;
                lp_accum__.add(normal_log<propto__>(get_base1(m, i, "m", 1), mu_m, (1 / stan::math::sqrt(tau_m))));
                if (get_base1(m, i, "m", 1) < slope_lb) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(slope_lb, mu_m, (1 / stan::math::sqrt(tau_m))));
                current_statement_begin__ = 77;
                lp_accum__.add(normal_log<propto__>(get_base1(c, i, "c", 1), mu_c, (1 / stan::math::sqrt(tau_c))));
            }
            current_statement_begin__ = 80;
            lp_accum__.add(beta_log<propto__>(probdiff, alpha_pi, beta_pi));
            current_statement_begin__ = 81;
            lp_accum__.add(gamma_log<propto__>(tau_norm, shape_tau, rate_tau));
            current_statement_begin__ = 83;
            stan::math::assign(sigma_norm, (1 / stan::math::sqrt(tau_norm)));
            current_statement_begin__ = 84;
            stan::math::assign(sigma_def, (1 / stan::math::sqrt(tau_def)));
            current_statement_begin__ = 86;
            for (int i = 1; i <= nCtrl; ++i) {
                current_statement_begin__ = 87;
                lp_accum__.add(normal_log(get_base1(ctrl_mat, i, 2, "ctrl_mat", 1), ((get_base1(m, get_base1(ctrlIndex, i, "ctrlIndex", 1), "m", 1) * get_base1(ctrl_mat, i, 1, "ctrl_mat", 1)) + get_base1(c, get_base1(ctrlIndex, i, "ctrlIndex", 1), "c", 1)), sigma_norm));
            }
            current_statement_begin__ = 89;
            for (int j = 1; j <= nPat; ++j) {
                current_statement_begin__ = 90;
                lp_accum__.add(log_mix(probdiff, normal_log(get_base1(pat_mat, j, 2, "pat_mat", 1), ((get_base1(m, M, "m", 1) * get_base1(pat_mat, j, 1, "pat_mat", 1)) + get_base1(c, M, "c", 1)), sigma_def), normal_log(get_base1(pat_mat, j, 2, "pat_mat", 1), ((get_base1(m, M, "m", 1) * get_base1(pat_mat, j, 1, "pat_mat", 1)) + get_base1(c, M, "c", 1)), sigma_norm)));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("m");
        names__.push_back("c");
        names__.push_back("tau_norm");
        names__.push_back("mu_m");
        names__.push_back("mu_c");
        names__.push_back("tau_m");
        names__.push_back("tau_c");
        names__.push_back("probdiff");
        names__.push_back("log_probDef_tmp");
        names__.push_back("log_probHealthy_tmp");
        names__.push_back("sigma_norm_tmp");
        names__.push_back("sigma_def_tmp");
        names__.push_back("classif");
        names__.push_back("probvec");
        names__.push_back("dens");
        names__.push_back("yPred");
        names__.push_back("m_pred");
        names__.push_back("c_pred");
        names__.push_back("m_prior");
        names__.push_back("c_prior");
        names__.push_back("tau_norm_prior");
        names__.push_back("mu_m_prior");
        names__.push_back("mu_c_prior");
        names__.push_back("tau_m_prior");
        names__.push_back("tau_c_prior");
        names__.push_back("probdiff_prior");
        names__.push_back("yPred_prior");
        names__.push_back("m_pred_prior");
        names__.push_back("c_pred_prior");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nPat);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nPat);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nPat);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSyn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nSyn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_bhlmm_stan_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> m = in__.vector_lb_constrain(0, M);
        size_t m_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
            vars__.push_back(m(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> c = in__.vector_constrain(M);
        size_t c_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < c_j_1_max__; ++j_1__) {
            vars__.push_back(c(j_1__));
        }
        double tau_norm = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_norm);
        double mu_m = in__.scalar_constrain();
        vars__.push_back(mu_m);
        double mu_c = in__.scalar_constrain();
        vars__.push_back(mu_c);
        double tau_m = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_m);
        double tau_c = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_c);
        double probdiff = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(probdiff);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 97;
            double log_probDef_tmp;
            (void) log_probDef_tmp;  // dummy to suppress unused var warning
            stan::math::initialize(log_probDef_tmp, DUMMY_VAR__);
            stan::math::fill(log_probDef_tmp, DUMMY_VAR__);
            current_statement_begin__ = 98;
            double log_probHealthy_tmp;
            (void) log_probHealthy_tmp;  // dummy to suppress unused var warning
            stan::math::initialize(log_probHealthy_tmp, DUMMY_VAR__);
            stan::math::fill(log_probHealthy_tmp, DUMMY_VAR__);
            current_statement_begin__ = 99;
            double sigma_norm_tmp;
            (void) sigma_norm_tmp;  // dummy to suppress unused var warning
            stan::math::initialize(sigma_norm_tmp, DUMMY_VAR__);
            stan::math::fill(sigma_norm_tmp, DUMMY_VAR__);
            current_statement_begin__ = 100;
            double sigma_def_tmp;
            (void) sigma_def_tmp;  // dummy to suppress unused var warning
            stan::math::initialize(sigma_def_tmp, DUMMY_VAR__);
            stan::math::fill(sigma_def_tmp, DUMMY_VAR__);
            current_statement_begin__ = 103;
            validate_non_negative_index("classif", "nPat", nPat);
            std::vector<int> classif(nPat, int(0));
            stan::math::fill(classif, std::numeric_limits<int>::min());
            current_statement_begin__ = 104;
            validate_non_negative_index("probvec", "nPat", nPat);
            Eigen::Matrix<double, Eigen::Dynamic, 1> probvec(nPat);
            stan::math::initialize(probvec, DUMMY_VAR__);
            stan::math::fill(probvec, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("dens", "nPat", nPat);
            validate_non_negative_index("dens", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> dens(nPat, K);
            stan::math::initialize(dens, DUMMY_VAR__);
            stan::math::fill(dens, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("yPred", "nSyn", nSyn);
            Eigen::Matrix<double, Eigen::Dynamic, 1> yPred(nSyn);
            stan::math::initialize(yPred, DUMMY_VAR__);
            stan::math::fill(yPred, DUMMY_VAR__);
            current_statement_begin__ = 107;
            double m_pred;
            (void) m_pred;  // dummy to suppress unused var warning
            stan::math::initialize(m_pred, DUMMY_VAR__);
            stan::math::fill(m_pred, DUMMY_VAR__);
            current_statement_begin__ = 108;
            double c_pred;
            (void) c_pred;  // dummy to suppress unused var warning
            stan::math::initialize(c_pred, DUMMY_VAR__);
            stan::math::fill(c_pred, DUMMY_VAR__);
            current_statement_begin__ = 111;
            validate_non_negative_index("m_prior", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> m_prior(M);
            stan::math::initialize(m_prior, DUMMY_VAR__);
            stan::math::fill(m_prior, DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("c_prior", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> c_prior(M);
            stan::math::initialize(c_prior, DUMMY_VAR__);
            stan::math::fill(c_prior, DUMMY_VAR__);
            current_statement_begin__ = 113;
            double tau_norm_prior;
            (void) tau_norm_prior;  // dummy to suppress unused var warning
            stan::math::initialize(tau_norm_prior, DUMMY_VAR__);
            stan::math::fill(tau_norm_prior, DUMMY_VAR__);
            current_statement_begin__ = 114;
            double mu_m_prior;
            (void) mu_m_prior;  // dummy to suppress unused var warning
            stan::math::initialize(mu_m_prior, DUMMY_VAR__);
            stan::math::fill(mu_m_prior, DUMMY_VAR__);
            current_statement_begin__ = 115;
            double mu_c_prior;
            (void) mu_c_prior;  // dummy to suppress unused var warning
            stan::math::initialize(mu_c_prior, DUMMY_VAR__);
            stan::math::fill(mu_c_prior, DUMMY_VAR__);
            current_statement_begin__ = 116;
            double tau_m_prior;
            (void) tau_m_prior;  // dummy to suppress unused var warning
            stan::math::initialize(tau_m_prior, DUMMY_VAR__);
            stan::math::fill(tau_m_prior, DUMMY_VAR__);
            current_statement_begin__ = 117;
            double tau_c_prior;
            (void) tau_c_prior;  // dummy to suppress unused var warning
            stan::math::initialize(tau_c_prior, DUMMY_VAR__);
            stan::math::fill(tau_c_prior, DUMMY_VAR__);
            current_statement_begin__ = 118;
            double probdiff_prior;
            (void) probdiff_prior;  // dummy to suppress unused var warning
            stan::math::initialize(probdiff_prior, DUMMY_VAR__);
            stan::math::fill(probdiff_prior, DUMMY_VAR__);
            current_statement_begin__ = 119;
            validate_non_negative_index("yPred_prior", "nSyn", nSyn);
            Eigen::Matrix<double, Eigen::Dynamic, 1> yPred_prior(nSyn);
            stan::math::initialize(yPred_prior, DUMMY_VAR__);
            stan::math::fill(yPred_prior, DUMMY_VAR__);
            current_statement_begin__ = 120;
            double m_pred_prior;
            (void) m_pred_prior;  // dummy to suppress unused var warning
            stan::math::initialize(m_pred_prior, DUMMY_VAR__);
            stan::math::fill(m_pred_prior, DUMMY_VAR__);
            current_statement_begin__ = 121;
            double c_pred_prior;
            (void) c_pred_prior;  // dummy to suppress unused var warning
            stan::math::initialize(c_pred_prior, DUMMY_VAR__);
            stan::math::fill(c_pred_prior, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 124;
            stan::math::assign(log_probDef_tmp, stan::math::log(probdiff));
            current_statement_begin__ = 125;
            stan::math::assign(log_probHealthy_tmp, stan::math::log((1 - probdiff)));
            current_statement_begin__ = 126;
            stan::math::assign(sigma_norm_tmp, (1 / stan::math::sqrt(tau_norm)));
            current_statement_begin__ = 127;
            stan::math::assign(sigma_def_tmp, (1 / stan::math::sqrt(tau_def)));
            current_statement_begin__ = 129;
            for (int j = 1; j <= nPat; ++j) {
                current_statement_begin__ = 130;
                stan::model::assign(dens, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            stan::math::exp((log_probHealthy_tmp + normal_log(get_base1(pat_mat, j, 2, "pat_mat", 1), ((get_base1(m, M, "m", 1) * get_base1(pat_mat, j, 1, "pat_mat", 1)) + get_base1(c, M, "c", 1)), sigma_norm_tmp))), 
                            "assigning variable dens");
                current_statement_begin__ = 131;
                stan::model::assign(dens, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            stan::math::exp((log_probDef_tmp + normal_log(get_base1(pat_mat, j, 2, "pat_mat", 1), ((get_base1(m, M, "m", 1) * get_base1(pat_mat, j, 1, "pat_mat", 1)) + get_base1(c, M, "c", 1)), sigma_def_tmp))), 
                            "assigning variable dens");
                current_statement_begin__ = 132;
                stan::model::assign(probvec, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(dens, j, 2, "dens", 1) / sum(stan::model::rvalue(dens, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "dens"))), 
                            "assigning variable probvec");
            }
            current_statement_begin__ = 135;
            stan::math::assign(classif, bernoulli_rng(probvec, base_rng__));
            current_statement_begin__ = 138;
            stan::math::assign(mu_m_prior, normal_rng(mean_mu_m, (1 / stan::math::sqrt(prec_mu_m)), base_rng__));
            current_statement_begin__ = 139;
            stan::math::assign(mu_c_prior, normal_rng(mean_mu_c, (1 / stan::math::sqrt(prec_mu_c)), base_rng__));
            current_statement_begin__ = 140;
            stan::math::assign(tau_m_prior, gamma_rng(shape_tau_m, rate_tau_m, base_rng__));
            current_statement_begin__ = 141;
            stan::math::assign(tau_c_prior, gamma_rng(shape_tau_c, rate_tau_c, base_rng__));
            current_statement_begin__ = 142;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 143;
                stan::model::assign(m_prior, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_lb_rng(mu_m_prior, (1 / stan::math::sqrt(tau_m_prior)), slope_lb, base_rng__, pstream__), 
                            "assigning variable m_prior");
                current_statement_begin__ = 144;
                stan::model::assign(c_prior, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_rng(mu_c_prior, (1 / stan::math::sqrt(tau_c_prior)), base_rng__), 
                            "assigning variable c_prior");
            }
            current_statement_begin__ = 146;
            stan::math::assign(m_pred_prior, normal_lb_rng(mu_m_prior, (1 / stan::math::sqrt(tau_m_prior)), slope_lb, base_rng__, pstream__));
            current_statement_begin__ = 147;
            stan::math::assign(c_pred_prior, normal_rng(mu_c_prior, (1 / stan::math::sqrt(tau_c_prior)), base_rng__));
            current_statement_begin__ = 148;
            stan::math::assign(tau_norm_prior, gamma_rng(shape_tau, rate_tau, base_rng__));
            current_statement_begin__ = 149;
            stan::math::assign(probdiff_prior, beta_rng(alpha_pi, beta_pi, base_rng__));
            current_statement_begin__ = 152;
            stan::math::assign(m_pred, normal_lb_rng(mu_m, (1 / stan::math::sqrt(tau_m)), slope_lb, base_rng__, pstream__));
            current_statement_begin__ = 153;
            stan::math::assign(c_pred, normal_rng(mu_c, (1 / stan::math::sqrt(tau_c)), base_rng__));
            current_statement_begin__ = 156;
            for (int k = 1; k <= nSyn; ++k) {
                current_statement_begin__ = 157;
                stan::model::assign(yPred, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            normal_rng(((get_base1(m, M, "m", 1) * get_base1(xSyn, k, "xSyn", 1)) + get_base1(c, M, "c", 1)), sigma_norm_tmp, base_rng__), 
                            "assigning variable yPred");
                current_statement_begin__ = 158;
                stan::model::assign(yPred_prior, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            normal_rng(((get_base1(m_prior, M, "m_prior", 1) * get_base1(xSyn, k, "xSyn", 1)) + get_base1(c_prior, M, "c_prior", 1)), (1 / stan::math::sqrt(tau_norm_prior)), base_rng__), 
                            "assigning variable yPred_prior");
            }
            // validate, write generated quantities
            current_statement_begin__ = 97;
            vars__.push_back(log_probDef_tmp);
            current_statement_begin__ = 98;
            vars__.push_back(log_probHealthy_tmp);
            current_statement_begin__ = 99;
            vars__.push_back(sigma_norm_tmp);
            current_statement_begin__ = 100;
            vars__.push_back(sigma_def_tmp);
            current_statement_begin__ = 103;
            size_t classif_i_0_max__ = nPat;
            for (size_t i_0__ = 0; i_0__ < classif_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "classif[i_0__]", classif[i_0__], 0);
                check_less_or_equal(function__, "classif[i_0__]", classif[i_0__], 1);
            }
            size_t classif_k_0_max__ = nPat;
            for (size_t k_0__ = 0; k_0__ < classif_k_0_max__; ++k_0__) {
                vars__.push_back(classif[k_0__]);
            }
            current_statement_begin__ = 104;
            check_greater_or_equal(function__, "probvec", probvec, 0);
            check_less_or_equal(function__, "probvec", probvec, 1);
            size_t probvec_j_1_max__ = nPat;
            for (size_t j_1__ = 0; j_1__ < probvec_j_1_max__; ++j_1__) {
                vars__.push_back(probvec(j_1__));
            }
            current_statement_begin__ = 105;
            check_greater_or_equal(function__, "dens", dens, 0);
            size_t dens_j_2_max__ = K;
            size_t dens_j_1_max__ = nPat;
            for (size_t j_2__ = 0; j_2__ < dens_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < dens_j_1_max__; ++j_1__) {
                    vars__.push_back(dens(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 106;
            size_t yPred_j_1_max__ = nSyn;
            for (size_t j_1__ = 0; j_1__ < yPred_j_1_max__; ++j_1__) {
                vars__.push_back(yPred(j_1__));
            }
            current_statement_begin__ = 107;
            vars__.push_back(m_pred);
            current_statement_begin__ = 108;
            vars__.push_back(c_pred);
            current_statement_begin__ = 111;
            size_t m_prior_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < m_prior_j_1_max__; ++j_1__) {
                vars__.push_back(m_prior(j_1__));
            }
            current_statement_begin__ = 112;
            size_t c_prior_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < c_prior_j_1_max__; ++j_1__) {
                vars__.push_back(c_prior(j_1__));
            }
            current_statement_begin__ = 113;
            check_greater_or_equal(function__, "tau_norm_prior", tau_norm_prior, 0);
            vars__.push_back(tau_norm_prior);
            current_statement_begin__ = 114;
            vars__.push_back(mu_m_prior);
            current_statement_begin__ = 115;
            vars__.push_back(mu_c_prior);
            current_statement_begin__ = 116;
            check_greater_or_equal(function__, "tau_m_prior", tau_m_prior, 0);
            vars__.push_back(tau_m_prior);
            current_statement_begin__ = 117;
            check_greater_or_equal(function__, "tau_c_prior", tau_c_prior, 0);
            vars__.push_back(tau_c_prior);
            current_statement_begin__ = 118;
            check_greater_or_equal(function__, "probdiff_prior", probdiff_prior, 0);
            check_less_or_equal(function__, "probdiff_prior", probdiff_prior, 1);
            vars__.push_back(probdiff_prior);
            current_statement_begin__ = 119;
            size_t yPred_prior_j_1_max__ = nSyn;
            for (size_t j_1__ = 0; j_1__ < yPred_prior_j_1_max__; ++j_1__) {
                vars__.push_back(yPred_prior(j_1__));
            }
            current_statement_begin__ = 120;
            vars__.push_back(m_pred_prior);
            current_statement_begin__ = 121;
            vars__.push_back(c_pred_prior);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_bhlmm_stan";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t m_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t c_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < c_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_norm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_m";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_m";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "probdiff";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_probDef_tmp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_probHealthy_tmp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_norm_tmp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_def_tmp";
        param_names__.push_back(param_name_stream__.str());
        size_t classif_k_0_max__ = nPat;
        for (size_t k_0__ = 0; k_0__ < classif_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "classif" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t probvec_j_1_max__ = nPat;
        for (size_t j_1__ = 0; j_1__ < probvec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "probvec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dens_j_2_max__ = K;
        size_t dens_j_1_max__ = nPat;
        for (size_t j_2__ = 0; j_2__ < dens_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < dens_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dens" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t yPred_j_1_max__ = nSyn;
        for (size_t j_1__ = 0; j_1__ < yPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "m_pred";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c_pred";
        param_names__.push_back(param_name_stream__.str());
        size_t m_prior_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < m_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t c_prior_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < c_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_norm_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_m_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_c_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_m_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_c_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "probdiff_prior";
        param_names__.push_back(param_name_stream__.str());
        size_t yPred_prior_j_1_max__ = nSyn;
        for (size_t j_1__ = 0; j_1__ < yPred_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yPred_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "m_pred_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c_pred_prior";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t m_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t c_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < c_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_norm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_m";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_m";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "probdiff";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_probDef_tmp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_probHealthy_tmp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_norm_tmp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_def_tmp";
        param_names__.push_back(param_name_stream__.str());
        size_t classif_k_0_max__ = nPat;
        for (size_t k_0__ = 0; k_0__ < classif_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "classif" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t probvec_j_1_max__ = nPat;
        for (size_t j_1__ = 0; j_1__ < probvec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "probvec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dens_j_2_max__ = K;
        size_t dens_j_1_max__ = nPat;
        for (size_t j_2__ = 0; j_2__ < dens_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < dens_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dens" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t yPred_j_1_max__ = nSyn;
        for (size_t j_1__ = 0; j_1__ < yPred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yPred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "m_pred";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c_pred";
        param_names__.push_back(param_name_stream__.str());
        size_t m_prior_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < m_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t c_prior_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < c_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_norm_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_m_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_c_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_m_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_c_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "probdiff_prior";
        param_names__.push_back(param_name_stream__.str());
        size_t yPred_prior_j_1_max__ = nSyn;
        for (size_t j_1__ = 0; j_1__ < yPred_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yPred_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "m_pred_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c_pred_prior";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_bhlmm_stan_namespace::model_bhlmm_stan stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
