Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100 thin=1, variable.names = c(beta0, beta1, tau, tauBeta, mu))
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100 thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[patSite[k], j] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[i,] ~ dmnorm( mu[,i], 0.5*I_N)
}
for(i in 1:Nsite){
mu[,i] ~ dmnorm(Nzeros, 0.1*I_N)
}
}"
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[patSite[k], j] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[i,] ~ dmnorm( mu, 0.5*I_N)
}
mu ~ dmnorm(Nzeros, 0.1*I_N)
}"
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[,i] ~ dmnorm( mu, 0.5*I_N )
mu[,i] ~ dmnorm( Nzeros, 0.1*I_N )
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[,i] ~ dmnorm( mu[,i], 0.5*I_N )
mu[,i] ~ dmnorm( Nzeros, 0.1*I_N )
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[,i] ~ dmnorm( mu[,i], 0.5*I_N )
}
for(i in 1:Nsite){
mu[,i] ~ dmnorm( Nzeros, 0.1*I_N )
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100 thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[,i] ~ dmnorm( mu[,i], 0.5*I_N )
}
for(i in 1:Nsite){
for(j in 1:Nrois){
mu[j,i] ~ dmnorm( 0, 0.1 )
}
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
for(j in 1:Nrois){
beta0[j,i] ~ dmnorm( mu[j,i], 0.5 )
}
}
for(i in 1:Nsite){
for(j in 1:Nrois){
mu[j,i] ~ dmnorm( 0, 0.1 )
}
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ dgamma(10,1)
}
for(i in 1:Nsite){
for(j in 1:Nrois){
beta0[j,i] ~ dmnorm( mu[j,i], 0.5 )
}
}
for(i in 1:Nsite){
for(j in 1:Nrois){
mu[j,i] ~ dmnorm( 0, 0.1 )
}
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100 thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
output = coda.samples(model=model, n.iter=100, thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
output
setwd("/Users/jordanchilds/Documents/GitHub/analysis2Dmito")
exampleData = get_exampleData()
```
### Getting data
Getting data into the correct form is crucial to be able to use the inference and plotting function which are part of this package. The package comes with andexample dataset which is already in the correct form, so to start we will look at this.
### Getting data
Getting data into the correct form is crucial to be able to use the inference and plotting function which are part of this package. The package comes with andexample dataset which is already in the correct form, so to start we will look at this.
### Getting data
Getting data into the correct form is crucial to be able to use the inference and plotting function which are part of this package. The package comes with andexample dataset which is already in the correct form, so to start we will look at this.
View(exampleData)
tt = get_exampleData()
library("analysis2Dmito")
tt = get_exampleData()
?head
View(tt)
View(tt)
library("rjags")
modelstring = "
model{
for(k in 1:Npat){
Y[k] ~ dnorm( beta0[region[k],site[k]] + beta1[region[k]]*X[k], tau[region[k]] )
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ dgamma(10,1)
}
for(i in 1:Nsite){
for(j in 1:Nrois){
beta0[j,i] ~ dmnorm( mu[j,i], 0.5 )
}
}
for(i in 1:Nsite){
for(j in 1:Nrois){
mu[j,i] ~ dmnorm( 0.0, 0.1 )
}
}
}"
rep(1:3, 3)
# X and Y data in matrix form, each row being a patient and column being a brain region
data_y = nrorm(Npat*Nrois)
# X and Y data in matrix form, each row being a patient and column being a brain region
data_y = rmorm(Npat*Nrois)
# X and Y data in matrix form, each row being a patient and column being a brain region
data_y = rnorm(Npat*Nrois)
Nsite = 3 # number of sites
Nrois = 84  # number of roys
Npat = 10 # total number of patients across all sites
# X and Y data in matrix form, each row being a patient and column being a brain region
data_y = rnorm(Npat*Nrois)
data_y
?rep
rep(1:2, 2, each=2)
ages = sample(20:100, size=Npat)
ages
data_x = rep(ages, n=Npat, each=Nrois)
data_x
Nsite = 3 # number of sites
Nrois = 84  # number of roys
Npat = 10 # total number of patients across all sites
ages = sample(20:100, size=Npat)
# X and Y data in matrix form, each row being a patient and column being a brain region
data_y = rnorm(Npat*Nrois)
data_x = rep(ages, n=Npat, each=Nrois)
# vector of length Npat, indicating which site they are from
# site indicators are numbers in the range 1:Nsite
patSite = sample(1:3, Npat, replace=TRUE)
patSite
Npat
site = rep(patSite, each=Nrois)
site
pat = rep(1:Npat, each=Nrois)
rois = rep(1:Nrois, Npat)
rois
df = data.frame(patID=pat, siteID=site, rois=rois, value=data_y, age=ages)
head(df)
df[df$patID==1, "siteID"]
df[df$patID==2, "siteID"]
for(id in patID){
print(length(unique(df[df$patID==id, "siteID"]))==1)
}
pat
for(id in unique(pat)){
print(length(unique(df[df$patID==id, "siteID"]))==1)
}
dataList = list(
Y = df$value,
X = df$ages,
Npat = Npat,
Nsite = Nsite,
Nrois = Nrois,
region = df$rois,
site = df$siteID,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
# identity matrix - although I removed this in the priors
I_N = diag(Nrois)
# vector of zeros - although I removed this from the priors
Nzeros = double(Nrois)
dataList = list(
Y = df$value,
X = df$ages,
Npat = Npat,
Nsite = Nsite,
Nrois = Nrois,
region = df$rois,
site = df$siteID,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
library("rjags")
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
dataList = list(
Y = df$value,
X = df$ages,
Npat = Npat,
Nsite = Nsite,
Nrois = Nrois,
region = df$rois,
site = df$siteID,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
dataList
dataList$X
dataList = list(
Y = df$value,
X = df$age,
Npat = Npat,
Nsite = Nsite,
Nrois = Nrois,
region = df$rois,
site = df$siteID,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
dataList = list(
Y = df$value,
X = df$age,
Npat = Npat,
Nsite = Nsite,
Nrois = Nrois,
region = df$rois,
site = df$siteID,
Nzeros = Nzeros,
S_inv = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
Y[k] ~ dnorm( beta0[region[k],site[k]] + beta1[region[k]]*X[k], tau[region[k]] )
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S_inv )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ dgamma(10,1)
}
for(i in 1:Nsite){
for(j in 1:Nrois){
beta0[j,i] ~ dmnorm( mu[j,i], 0.5 )
}
}
for(i in 1:Nsite){
for(j in 1:Nrois){
mu[j,i] ~ dmnorm( 0.0, 0.1 )
}
}
}"
dataList = list(
Y = df$value,
X = df$age,
Npat = Npat,
Nsite = Nsite,
Nrois = Nrois,
region = df$rois,
site = df$siteID,
Nzeros = Nzeros,
S_inv = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100, thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
get_exampleData
?grep
?inference
setwd("/Users/jordanchilds/Documents/GitHub/Ahmed_2022/bayesian_analysis/analysis2Dmito")
