setwd("/Users/jordanchilds/Documents/GitHub/analysis2Dmito")
alphaBlack
document(())
document()
library("devtools")
devtools::install_github("roxygen2")
devtools::install_github("roxygen")
library(roxygen2)
document()
?col2rgb
col2rgb("blue")
as.vector(col2rgb("blue"))
?rgb
document()
?rgb
document()
?jags.model
document()
?jags.model
?rjags::update.jags
?coda.samples
document()
document()
document()
document()
document()
document()
document()
?inference
document()
?inference
document()
?inference()
document()
?inference
document()
?inference
document()
document()
document()
document()
library("devtools")
library("roxygen2")
document()
document()
document()
?eapply
document()
library("roxygen2")
document()
library("devtools")
document()
document()
document()
cols = ifelse(is.null(classifs), alphaGreen(0.7), classcols(classifs))
library("devtools")
library(roxygen2)
document()
document()
document()
document()
document()
document()
document()
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_CIV", "raw_porin", "raw_CI")
reducedData = rawData[, c("caseno", "Fibre", channels, "controls")]
exampleData = reducedData %>% tidyr::pivot_longer(!c("caseno", "Fibre", "controls"), names_to =
"channel")
exampleData = as.data.frame(exampleData)
colnames(exampleData) = c("sampleID", "fibreID", "control", "channel", "value")
exampleData = plyr::match_df(exampleData, exampleData[exampleData$value >
0, ])
return(exampleData)
}
get_exampleData()
library("readr")
;ibrary("tidyr")
library("tidyr")
library("plyr")
get_exampleData()
dt = get_exampleData()
sbj = dt$sampleID
sbj = unique(dt$sampleID)
sbj
table(dt[dt$sampleID==sb, ])
table(dt[dt$sampleID==sb, "fibreID"])
for( sb in sbj ){
table(dt[dt$sampleID==sb, "fibreID"])
}
print( table(dt[dt$sampleID==sb, "fibreID"]) )
for( sb in sbj ){
print( table(dt[dt$sampleID==sb, "fibreID"]) )
}
?all
?all.equal
for( sb in sbj ){
tt = table(dt[dt$sampleID==sb, "fibreID"])
print( length(tt) == sum(tt==3))
}
?match_df
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_CIV", "raw_porin", "raw_CI")
reducedData = rawData[, c("caseno", "Fibre", channels, "controls")]
exampleData = reducedData %>% tidyr::pivot_longer(!c("caseno", "Fibre", "controls"), names_to =
"channel")
exampleData = as.data.frame(exampleData)
colnames(exampleData) = c("sampleID", "fibreID", "control", "channel", "value")
exampleData = plyr::match_df(exampleData[exampleData$value >0, ], exampleData)
return(exampleData)
}
dt = get_exampleData()
sbj = unique(dt$sampleID)
for( sb in sbj ){
tt = table(dt[dt$sampleID==sb, "fibreID"])
print( length(tt) == sum(tt==3))
}
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_CIV", "raw_porin", "raw_CI")
reducedData = rawData[, c("caseno", "Fibre", channels, "controls")]
exampleData = reducedData %>% tidyr::pivot_longer(!c("caseno", "Fibre", "controls"), names_to =
"channel")
exampleData = as.data.frame(exampleData)
colnames(exampleData) = c("sampleID", "fibreID", "control", "channel", "value")
# exampleData = plyr::match_df(exampleData[exampleData$value >0, ], exampleData)
return(exampleData)
}
dt = get_exampleData()
sbj = unique(dt$sampleID)
for( sb in sbj ){
tt = table(dt[dt$sampleID==sb, "fibreID"])
print( length(tt) == sum(tt==3))
}
?pivot_longer
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_CIV", "raw_porin", "raw_CI")
reducedData = rawData[, c("caseno", "Fibre", channels, "controls")]
# exampleData = reducedData %>% tidyr::pivot_longer(!c("caseno", "Fibre", "controls"), names_to =
"channel")
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_CIV", "raw_porin", "raw_CI")
exampleData = rawData[, c("caseno", "Fibre", channels, "controls")]
# exampleData = reducedData %>% tidyr::pivot_longer(!c("caseno", "Fibre", "controls"), names_to = channel")
exampleData = as.data.frame(exampleData)
colnames(exampleData) = c("sampleID", "fibreID", "control", "channel", "value")
# exampleData = plyr::match_df(exampleData[exampleData$value >0, ], exampleData)
return(exampleData)
}
dt = get_exampleData()
sbj = unique(dt$sampleID)
head(dt)
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_CIV", "raw_porin", "raw_CI")
exampleData = rawData[, c("caseno", "Fibre", channels, "controls")]
# exampleData = reducedData %>% tidyr::pivot_longer(!c("caseno", "Fibre", "controls"), names_to = channel")
exampleData = as.data.frame(exampleData)
# colnames(exampleData) = c("sampleID", "fibreID", "control", "channel", "value")
# exampleData = plyr::match_df(exampleData[exampleData$value >0, ], exampleData)
return(exampleData)
}
dt = get_exampleData()
head(dt)
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_CIV", "raw_porin", "raw_CI")
exampleData = rawData[, c("caseno", "Fibre", channels, "controls")]
# exampleData = reducedData %>% tidyr::pivot_longer(!c("caseno", "Fibre", "controls"), names_to = channel")
exampleData = as.data.frame(exampleData)
# colnames(exampleData) = c("sampleID", "fibreID", "control", "channel", "value")
# exampleData = plyr::match_df(exampleData[exampleData$value >0, ], exampleData)
return(exampleData)
}
dt = get_exampleData()
head(dt)
sbj = unique(dt$caseno)
for(sb in sbj){
tt = table(dt$Fibre)
print(length(tt)==sum(tt==3))
}
sum(tt==3)
tt
for(sb in sbj){
tt = table(dt[dt$caseno==sb, "fibre"])
print(length(tt)==sum(tt==3))
}
which(dt[,c(3,4,5)]=<0)
which(dt[,c(3,4,5)]<=0)
math_df
?match_df
head(dt)
?pivot_longer
channels = grep("raw", colnames(dt), value=TRUE)
channels
pivot_longer(dt, cols=channels)
pivot_longer(dt, cols=channels, names_to="channels")
tt = pivot_longer(dt, cols=channels, names_to="channels")
ss = pivot_longer(dt, cols=channels, names_to="channels")
sbj = unique(tt$caseno)
sbj
match_df(ss[ss$value>0,], ss)
mm = match_df(ss[ss$value>0,], ss)
dt = get_exampleData()
head(dt)
channels = grep("raw", colnames(dt), value=TRUE)
ss = pivot_longer(dt, cols=channels, names_to="channels")
sbj = unique(tt$caseno)
mm = match_df(ss[ss$value>0,], ss)
ss
ss$value>0
ss[ss$value>0,]
ss[ss$value<=0,]
mm = match_df(ss[ss$value<=0,], ss)
?match_df
mm = match_df(ss[ss$value<=0,], ss, on=c("caseno", "Fibre", "control"))
mm = match_df(ss[ss$value<=0,], ss, on=c("caseno", "Fibre", "controls"))
mm
mm = match_df(ss[ss$value>0,], ss, on=c("caseno", "Fibre", "controls"))
mm
which(mm$value>0)
which(mm$value<0)
dt = get_exampleData()
head(dt)
channels = grep("raw", colnames(dt), value=TRUE)
ss = pivot_longer(dt, cols=channels, names_to="channels")
sbj = unique(tt$caseno)
mm = match_df(ss[ss$value>0,], ss, on=c("caseno", "Fibre", "controls"))
for(sb in sbj){
tt = table(dt[dt$caseno==sb, "fibre"])
}
dim(ss)
dim(mm)
ss
mm
mm = match_df(ss[ss$value>0,], ss, on=c("caseno", "Fibre"))
dim(ss)
dim(mm)
mm = match_df(ss[ss$value>0,], ss, on=c("caseno", "Fibre", "channels"))
mm
dim(ss)
dim(mm)
mm = match_df(ss, ss[ss$value>0,], on=c("caseno", "Fibre", "channels"))
dim(ss)
dim(mm)
zz = ss[ss$value>0,]
ss[ss$value>0,]
zz = ss[ss$value>0, c("caseno", "Fibre")]
zz
zz = ss[ss$value<=0, c("caseno", "Fibre")]
zz
ss[zz,]
match_df(ss, zz)
zz = ss[ss$value>0, c("caseno", "Fibre")]
match_df(ss, zz)
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_CIV", "raw_porin", "raw_CI")
rawData_sub = rawData[, c("caseno", "Fibre", channels, "controls")]
channels = grep("raw", colnames(rawData_sub), value = TRUE)
longFrom_df = tidyr::pivot_longer(rawData_sub, cols = channels, names_to =
"channels")
# greaterThenZero_df = longForm_df[longFrom_df$value > 0, c("caseno", "Fibre")]
#exampleData = plyr::match_df(longFrom_df, greaterThenZero_df)
#colnames(exampleData) = c("sampleID", "fibreID", "subject_type", "channel", "value")
return(longFrom_df)
}
dt = get_exampleData()
head(dt)
problematicIDs = unique(dt$caseno[dt$value<=0])
problematicIDs
dt = dt[!dt$caseno%in%problematicIDs,]
dt
unique(dt$caseno)
dt$caseno%in%problematicIDs
problematicIDs
dt = dt[!dt$caseno%in%problematicIDs,]
unique(dt$caseno)
document()
document()
rm(list=c("get_exampleData"))
document()
#' problem. Assuming the original dataset will not be updated this results in
#' the removal of two fibres.
#'
#' @author Syeda T Ahmed, Robert W Taylor, Doug M Turnbull, Conor Lawless, Sarah T Pickett
#'
#' @importFrom readr read_delim
#' @importFrom tidyr pivot_longer
#' @importFrom plyr match_df
#'
#' @export
get_exampleData = function() {
urlfile = "https://raw.githubusercontent.com/CnrLwlss/Ahmed_2022/master/rawdat_a_filtered.csv"
rawData = readr::read_delim(url(urlfile), delim = "\t")
channels = c("raw_porin", "raw_CI", "raw_CIV")
rawData_sub = rawData[, c("caseno", "Fibre", channels, "controls")]
longFrom_df = tidyr::pivot_longer(rawData_sub, cols = channels, names_to =
"channels")
return(longFrom_df)
}
dt = get_exampleData()
?postPlot
tau_m0_mode = 1 / 0.5 ^ 2 # expected sd of 0.5
tau_m0_var = 500
rate_tau_m0 = 0.5 * (tau_m0_mode + sqrt(tau_m0_mode ^ 2 + 4 * tau_m0_var)) / tau_m0_var
shape_tau_m0 = 1 + tau_m0_mode * rate_tau_m0
rate_tau_m0
shape_tau_m0
tau_mode = 1 / sqrt(0.05) ^ 2
tau_var = 10
rate_tau = 0.5 * (tau_mode + sqrt(tau_mode ^ 2 + 4 * tau_var)) / tau_var
shape_tau = 1 + tau_mode * rate_tau
rate_tau
shape_tau
tt = list(a=1, b=2)
ss = list(c=3, d=4)
ff = c(tt,ss)
ff
tau_m0_mode = 1 / 0.5 ^ 2 # expected sd of 0.5
tau_m0_var = 500
rate_tau_m0 = 0.5 * (tau_m0_mode + sqrt(tau_m0_mode ^ 2 + 4 * tau_m0_var)) / tau_m0_var
shape_tau_m0 = 1 + tau_m0_mode * rate_tau_m0
rate_tau_m0
shape_tau_m0
tau_mode = 1 / sqrt(0.05) ^ 2
tau_var = 10
rate_tau = 0.5 * (tau_mode + sqrt(tau_mode ^ 2 + 4 * tau_var)) / tau_var
shape_tau = 1 + tau_mode * rate_tau
rate_tau
shape_tau
