model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
# for(i in 1:Nsite){
#   for(j in 1:Nrois){
#     for(k in 1:Npat){
#       Y[i,j,k] ~ dnorm( beta0[i,j] + beta1[j]*X[i,j,k], tau[j])
#     }
#   }
# }
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[patSite[k], j] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[i,] ~ dmnorm( mu[i,], 0.5*I_N)
mu[i,] ~ dmnrom( Nzeros, 0.1*I_N)
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
# for(i in 1:Nsite){
#   for(j in 1:Nrois){
#     for(k in 1:Npat){
#       Y[i,j,k] ~ dnorm( beta0[i,j] + beta1[j]*X[i,j,k], tau[j])
#     }
#   }
# }
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[patSite[k], j] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[i,] ~ dmnorm( mu[i,], 0.5*I_N)
mu[i,] ~ dmnorm( Nzeros, 0.1*I_N)
}
}"
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
# for(i in 1:Nsite){
#   for(j in 1:Nrois){
#     for(k in 1:Npat){
#       Y[i,j,k] ~ dnorm( beta0[i,j] + beta1[j]*X[i,j,k], tau[j])
#     }
#   }
# }
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[patSite[k], j] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[i,] ~ dmnorm( mu[i,], 0.5*I_N)
}
for(i in 1:Nsite){
mu[i,] ~ dmnorm(Nzeros, 0.1*I_N)
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
# for(i in 1:Nsite){
#   for(j in 1:Nrois){
#     for(k in 1:Npat){
#       Y[i,j,k] ~ dnorm( beta0[i,j] + beta1[j]*X[i,j,k], tau[j])
#     }
#   }
# }
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[patSite[k], j] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[i,] ~ dmnorm( mu[,i], 0.5*I_N)
}
for(i in 1:Nsite){
mu[,i] ~ dmnorm(Nzeros, 0.1*I_N)
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100 thin=1, variable.names = c(beta0, beta1, tau, tauBeta, mu))
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100 thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[patSite[k], j] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[i,] ~ dmnorm( mu[,i], 0.5*I_N)
}
for(i in 1:Nsite){
mu[,i] ~ dmnorm(Nzeros, 0.1*I_N)
}
}"
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[patSite[k], j] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[i,] ~ dmnorm( mu, 0.5*I_N)
}
mu ~ dmnorm(Nzeros, 0.1*I_N)
}"
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[,i] ~ dmnorm( mu, 0.5*I_N )
mu[,i] ~ dmnorm( Nzeros, 0.1*I_N )
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[,i] ~ dmnorm( mu[,i], 0.5*I_N )
mu[,i] ~ dmnorm( Nzeros, 0.1*I_N )
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[,i] ~ dmnorm( mu[,i], 0.5*I_N )
}
for(i in 1:Nsite){
mu[,i] ~ dmnorm( Nzeros, 0.1*I_N )
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100 thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
beta0[,i] ~ dmnorm( mu[,i], 0.5*I_N )
}
for(i in 1:Nsite){
for(j in 1:Nrois){
mu[j,i] ~ dmnorm( 0, 0.1 )
}
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ Ga(10,1)
}
for(i in 1:Nsite){
for(j in 1:Nrois){
beta0[j,i] ~ dmnorm( mu[j,i], 0.5 )
}
}
for(i in 1:Nsite){
for(j in 1:Nrois){
mu[j,i] ~ dmnorm( 0, 0.1 )
}
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
modelstring = "
model{
for(k in 1:Npat){
for(j in 1:Nrois){
Y[k, j] ~ dnorm( beta0[j,patSite[k]] + beta1[j]*X[k,j], tau[j] )
}
}
beta1 ~ dmnorm( Nzeros, (1/tauBeta)*S )
tauBeta ~ dgamma(5,1)
for(j in 1:Nrois){
tau[j] ~ dgamma(10,1)
}
for(i in 1:Nsite){
for(j in 1:Nrois){
beta0[j,i] ~ dmnorm( mu[j,i], 0.5 )
}
}
for(i in 1:Nsite){
for(j in 1:Nrois){
mu[j,i] ~ dmnorm( 0, 0.1 )
}
}
}"
Nsite = 3
Nrois = 84
Npat = 10
data_y = matrix(NA, nrow=Npat, ncol=Nrois)
data_x = data_y
for(i in 1:Npat){
data_y[i,] = rnorm(Nrois)
data_x[i,] = rnorm(Nrois)
}
patSite = sample(1:3, Npat, replace=TRUE)
I_N = diag(Nrois)
Nzeros = double(Nrois)
dataList = list(
Y = data_y,
X = data_x,
Npat = Npat,
Nrois = Nrois,
Nsite = Nsite,
patSite = patSite,
Nzeros = Nzeros,
I_N = I_N,
S = diag(Nrois)
)
model = jags.model(textConnection(modelstring), data = dataList, n.chains = 1)
output = coda.samples(model=model, n.iter=100 thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
output = coda.samples(model=model, n.iter=100, thin=1, variable.names = c("beta0", "beta1", "tau", "tauBeta", "mu"))
output
setwd("/Users/jordanchilds/Documents/GitHub/analysis2Dmito")
exampleData = get_exampleData()
```
### Getting data
Getting data into the correct form is crucial to be able to use the inference and plotting function which are part of this package. The package comes with andexample dataset which is already in the correct form, so to start we will look at this.
### Getting data
Getting data into the correct form is crucial to be able to use the inference and plotting function which are part of this package. The package comes with andexample dataset which is already in the correct form, so to start we will look at this.
### Getting data
Getting data into the correct form is crucial to be able to use the inference and plotting function which are part of this package. The package comes with andexample dataset which is already in the correct form, so to start we will look at this.
View(exampleData)
